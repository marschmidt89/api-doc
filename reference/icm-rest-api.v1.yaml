openapi: 3.0.1
info:
  title: ICM REST API
  contact:
    name: Intershop Communications AG
    url: http://intershop.com
  version: 0.0.0
servers:
- url: /INTERSHOP/rest/WFS/rest-api
security:
- UserSecurity: []
tags:
- name: localizations
  description: Localization API
- name: Search
  description: Search
paths:
  /subscriptions:
    post:
      tags:
      - Subscription (E-Mail Marketing)
      summary: Subscribes a recipient, with an e-mail, to the e-mail marketing provider configured for the application
      description: A subscriber, represented with an e-mail in the request body, is subscribed to the e-mail marketing provider specified for the application.
      operationId: subscribe
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/SubscriptionRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - subscriptions.provider_not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - subscriptions.recipient.invalid.error
             - subscriptions.recipient.missing.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict
             possible values for header error-key:
             - subscriptions.recipient.missing.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: |-
            Internal Server Error
             possible values for header error-key:
             - subscriptions.external_service.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /subscriptions/{SubscriptionResourceKey}:
    get:
      tags:
      - Subscription (E-Mail Marketing)
      summary: Shows subscription status for given recipient
      description: |-
        This URI could be accessed with either authentication header or not. If such header, with valid credentials, is sent from the client and the sub resource is "-", e. g., /subscriptions/-, then the recipient e-mail will be taken from the user which credentials are sent.
        If valid e-mail addresses is used as sub resource name, e. g., /subscriptions/patricia@test.intershop.de, then this e-mail address will be checked for subscription entries in the subscription's provider.
        Whichever recipient's e-mail is used the response status codes will be 200 OK, if the recipient is subscribed, or 404 Not Found, if they are not.
        This resource depends on back office configuration for e-mail marketing provider. If no such provider is configured it will respond with 404 Not Found.
      operationId: getStatus
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: SubscriptionResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/SubscriptionRO'
        404:
          description: |-
            Not found
             possible values for header error-key:
             - subscriptions.subscription_not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: |-
            Internal Server Error
             possible values for header error-key:
             - subscriptions.external_service.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Subscription (E-Mail Marketing)
      summary: Unsubscripe recipient from an e-mail provider
      description: |-
        This URI could be accessed with either authentication header or not. If such header, with valid credentials, is sent from the client and the sub resource is "-", e. g., /subscriptions/-, then the recipient e-mail will be taken from the user which credentials are sent.
        If valid e-mail addresses is used as sub resource name, e. g., /subscriptions/patricia@test.intershop.de, then this e-mail address will be checked for subscription entries in the subscription's provider.
        Whichever recipient's e-mail is used the response status codes will be 200 OK, if the recipient is subscribed, or 404 Not Found, if they are not.
        This resource depends on back office configuration for e-mail marketing provider. If no such provider is configured it will respond with 404 Not Found.
      operationId: unsubscribe
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: SubscriptionResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - subscriptions.subscription_not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: |-
            Internal Server Error
             possible values for header error-key:
             - subscriptions.external_service.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /baskets:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of active baskets for the user.
      description: Returns the list of active baskets for the user. A basket is active if it is in status 'OPEN'. The last modified basket is the most recent and therefore the first in the result list. If user authentication fails, a 401 error with body string 'Unauthorized' is returned.
      operationId: getBaskets_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: The list of active baskets.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Creates a new basket for the user.
      description: Creates a new basket for the user. If a basket with initial data is passed, these data will be set at the newly created basket. In case this leads to validation errors, no basket is created and error 422 together with a cause desciption is returned. If user authentication fails, a 401 error with body string 'Unauthorized' is returned.
      operationId: createBasket_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        description: The object containing the initial data to be set at the new basket.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketRO_v1'
      responses:
        201:
          description: The created basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        422:
          description: If the basket could not be created because of semantical errors in the initial data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the basket with the given ID.
      description: 'Returns the basket with the given ID for the user. If no active
        basket with this ID is found, a 404 error will be returned. If user authentication
        fails, a 401 error with body string ''Unauthorized'' is returned. Error 403
        is returned, if the user does not have the required access privileges. Instead
        of an ID "current" may be specified to retrieve the current active basket,
        if there is one. '
      operationId: getBasket_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The basket with the given ID.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        404:
          description: If no active basket is found.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        401:
          description: If the user could not be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
        403:
          description: If the user does not have the required access privileges.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the basket with the given ID.
      description: 'Deletes the basket with the given ID. Note that the basket may
        not be deleted immediately, but rather later on by a scheduled job. However,
        after calling this method, it will no longer be accessible. If no active basket
        with this ID is found for the user, a 404 error will be returned. If user
        authentication fails, a 401 error with body string ''Unauthorized'' is returned.
        Error 403 is returned, if the user does not have the required access privileges.
        Instead of an ID "current" may be specified to delete the current active basket,
        if there is one. '
      operationId: deleteBasket_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        404:
          description: If a basket with the given ID is not found in the list of user baskets.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        401:
          description: If the user could not be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
        403:
          description: If the user does not have the required access privileges.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Partially updates the basket with the given ID.
      description: 'Partially updates the basket with the given ID. If no active basket
        with this ID is found for the user, a 404 error will be returned. If user
        authentication fails, a 401 error with body string ''Unauthorized'' is returned.
        Error 403 is returned, if the user does not have the required access privileges.
        Instead of an ID "current" may be specified to update the current active basket,
        if there is one. '
      operationId: updateBasket_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the data to update the basket with the given ID.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketRO_v1'
      responses:
        200:
          description: The updated basket
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        404:
          description: If a basket with the given ID is not found in the list of user baskets.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketCtnrRO_v1'
        401:
          description: If the user could not be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
        403:
          description: If the user does not have the required access privileges.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/addresses:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of addresses that have been created at the selected basket.
      operationId: getAddresses_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: eligibleInvoiceToAddress
        in: query
        description: Whether invoice-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleShipToAddress
        in: query
        description: Whether ship-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleShipFromAddress
        in: query
        description: Whether ship-from addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleServiceToAddress
        in: query
        description: Whether service-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleInstallToAddress
        in: query
        description: Whether install-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of addresses.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Adds a new address to the basket.
      description: If a address with initial data is passed, these data will be set at the newly created address.
      operationId: createAddress_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The objects containing the initial data for creating the address.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddressRO_v1'
      responses:
        201:
          description: The newly created address, if it was created successfully.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressListCtnrRO_v1'
        422:
          description: A list of (semantical) error messages, if the address could not be added.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/addresses/{AddressKey}:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the address for the given ID.
      description: 'Returns the address for the given ID. If no address with this
        ID is found, a 404 error will be returned. '
      operationId: getAddress_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The address with the given ID.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressCtnrRO_v1'
        404:
          description: If an address with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the address with the given ID from the basket.
      description: Deletes the address with the given ID from the basket. If no address with this ID is found, a 404 error will be returned. If for some reason the address could not be removed, a 422 error will be returned.
      operationId: deleteAddress_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressCtnrRO_v1'
        404:
          description: If an address with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        422:
          description: If the address could not be deleted.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressCtnrRO_v1'
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Partially updates the address with the given ID.
      operationId: updateAddress_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the data to update the address with the given ID.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddressRO_v1'
      responses:
        200:
          description: The updated address.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressCtnrRO_v1'
        404:
          description: If a address with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        422:
          description: If the address could not be updated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressCtnrRO_v1'
  /baskets/{BasketResourceKey}/addresses/{AddressKey}/attributes:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns (custom) attributes for the address.
      operationId: getAddressAttributes_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of attributes.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Creates a new (custom) attribute at the basket address.
      description: Creates a new (custom) attribute at the basket address. The name of the attribute is used as identifier for the created sub resource. If an attribute with this name already exists or if an unknown type is passed or the value does not match the type, error 422 will be returned.
      operationId: createAddressAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        201:
          description: The created attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be created because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /baskets/{BasketResourceKey}/addresses/{AddressKey}/attributes/{AddressAttributeKey}:
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the attribute from the basket address.
      description: Deletes the attribute from the basket address. If no attribute with this name is found, a 404 error will be returned.
      operationId: deleteAddressAttribute_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressAttributeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        404:
          description: If an attribute with the given name is not found in the address.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Updates the basket address attribute.
      description: Updates the basket address attribute. Note that only the value may be changed; name and type of the attribute are immutable. An error with status code 422 will be returned in case the attribute could not be updated.
      operationId: updateAddressAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: AddressAttributeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        200:
          description: The updated attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be updated because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /baskets/{BasketResourceKey}/costobjects:
    get:
      tags:
      - Costobject
      - Basket
      summary: Get the cost objects assigned to the selected basket
      description: ResourceCollectionRO contains elements of type LinkRO
      operationId: getBasketCostObjectAssignments
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - View Cost Object (APP_B2B_VIEW_COSTOBJECT)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Costobject
      - Basket
      summary: Assigns a cost object to the basket
      operationId: createCostObjectAssignment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostObjectAssignmentRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/CostObjectAssignmentRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - Assign Cost Object To Basket (APP_B2B_ASSIGN_COSTOBJECT_TO_BASKET)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - basket.cost_object.missing_body.error
             - basket.cost_object.missing_attributes.error
             - basket.cost_object.invalid_attributes.error
             - basket.cost_object.already_set.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /baskets/{BasketResourceKey}/costobjects/{BasketCostObjectAssignmentKey}:
    get:
      tags:
      - Costobject
      - Basket
      summary: Get a specific cost object assigned to the selected basket
      operationId: getBasketCostObjectAssignment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketCostObjectAssignmentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostObjectAssignmentRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/CostObjectAssignmentRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - View Cost Object (APP_B2B_VIEW_COSTOBJECT)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Costobject
      - Basket
      summary: Removes a cost object from the basket
      operationId: deleteCostObjectAssignment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketCostObjectAssignmentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - Delete Cost Object (APP_B2B_DELETE_COSTOBJECT)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /baskets/{BasketResourceKey}/eligible-addresses:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of eligible addresses that can be set at the selected basket.
      description: Returns the list of eligible addresses that can be set as invoice-to or ship-to addresses at the selected basket. This may include addresses created at the basket or at the customer.
      operationId: getEligibleAddresses_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: eligibleInvoiceToAddress
        in: query
        description: Whether invoice-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleShipToAddress
        in: query
        description: Whether ship-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleShipFromAddress
        in: query
        description: Whether ship-from addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleServiceToAddress
        in: query
        description: Whether service-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: eligibleInstallToAddress
        in: query
        description: Whether install-to addresses should be included in the response or not.
        schema:
          type: boolean
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of eligible addresses.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/AddressListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/buckets:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of shipping buckets for the selected basket.
      description: Returns the list of shipping buckets for the selected basket. Note that buckets are built dynamically and are not persisted. Bucket assignments and IDs could change if items are moved to a different bucket (by changing ship-to address or shipping method of a line item). It is therefore recommended to always retrieve the list of buckets before performing any operation on a single bucket.
      operationId: getShippingBuckets_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of shipping buckets.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingBucketListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/buckets/{ShippingBucketKey}:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the shipping bucket with the given ID.
      description: Returns the shipping bucket with the given ID. If no shipping bucket with this ID is found, a 404 error will be returned. Note that this could also mean that items have been added or removed from the bucket, as buckets are not persisted and IDs are determined dynamically through a hash over all items in the bucket. If such changes occur, the shipping bucket list needs to be retrieved again before working on single buckets.
      operationId: getShippingBucket_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: ShippingBucketKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The shipping bucket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingBucketCtnrRO_v1'
        404:
          description: If a shipping bucket with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingBucketCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Updates the shipping bucket with the given ID.
      description: Updates the shipping bucket with the given ID. If no shipping bucket with this ID is found, a 404 error will be returned. If for some reason the shipping bucket could not be updated, a 422 error will be returned. Note that manipulating the shipping bucket may cause a change in the shipping bucket ID, as IDs are determined dynamically through a hash over all items in the bucket. This means a bucket with a different ID may be returned in the response (e. g. when multiple shipping buckets are merged by changing the ship-to address or shipping method). When this happens, the whole shipping bucket list should be retrieved again before displaying it the next time (as other buckets may havebeen changed or removed as well).
      operationId: updateShippingBucket_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: ShippingBucketKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the data to update the shipping bucket with the given ID.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketShippingBucketRO_v1'
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingBucketCtnrRO_v1'
        404:
          description: If a shipping bucket with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        422:
          description: If the shipping bucket could not be updated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingBucketCtnrRO_v1'
  /baskets/{BasketResourceKey}/buckets/{ShippingBucketKey}/eligible-shipping-methods:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of shipping methods that are eligible for the selected shipping bucket.
      description: Returns the list of shipping methods that are eligible for the selected shipping bucket. This will only return common shipping methods that are valid for all line items in the shipping bucket.
      operationId: getShippingBucketEligibleShippingMethods_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: ShippingBucketKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of eligible shipping methods.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingMethodListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/payments:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of payments assigned to the current basket.
      operationId: getPayments_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of payments.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/payments/{BasketPaymentKey}:
    put:
      tags:
      - Basket (beta)
      summary: __BETA__ | Creates (or replaces) the payment with the given ID.
      description: Creates (or replaces) the payment with the given ID. If the payment could not be created, a 422 error will be returned. Note that this will only work for open tender payments, i. e. where the ID is 'open-tender'. Other payments are not supported via this method and a 405 error will be returned for those. For creating a new limited tender payment, use the POST method on the list resource. Updating or replacing an existing limited tender payment is never supported, it needs to be deleted and re-created.In case that the applied payment instrument supports redirect, it is possible to append success, cancel and failure redirect URL. Otherwise it is ignored.
      operationId: replacePayment_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the initial data for creating the payment.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PaymentRO_v1'
      responses:
        201:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
        422:
          description: If the payment could not be created.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the payment with the given ID.
      description: Deletes the payment with the given ID. If no payment with this ID is found, a 404 error will be returned.
      operationId: deletePayment_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
        404:
          description: If a payment with the given ID is not found.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Updates the payment.
      description: Updates the payment. If the payment could not be updated, a 422 error will be returned. Note that this will only allow to set/update redirect data, e.g. the return URLS'. Other changes are not supported and will be ignored.
      operationId: updatePayment_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the updated redirect data for the payment.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PaymentRO_v1'
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
        422:
          description: If the payment could not be updated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
  /baskets/{BasketResourceKey}/payments/{BasketPaymentKey}/redirect:
    put:
      tags:
      - Basket
      - Payment
      summary: REST client delivers the return URLs to the system
      description: The REST client sends the return URLs to the system, so that the redirect URL for the payment service provider can be created. This redirect URL will be send as response to the REST client so that the client can process the redirect action. After that, the user will be redirected back to his REST client based on the return URLs.
      operationId: createPaymentRedirectURL
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRedirectRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRedirectRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN Requires authentication with user having assigned the following permissions:
             - Purchase (APP_B2B_PURCHASE, only in B2B applications)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Basket
      - Payment
      summary: Transfer payment transaction information from the payment service provider, via the REST client to the shop system to activate there the payment transaction
      description: |-
        If the user has processed his payment transaction successfully at the payment providers system, he will be redirected back to his REST client. This return redirect contains various payment transaction attributes which must be transferred from the REST client back to the shop system to process the payment transaction. The redirect POST requests transfers this data from the REST client into the shop system so that the payment transaction can be activated there. For instance:
         - transaction ID
         - transaction status
         - and so on
      operationId: addPaymentRedirectResponseData
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRedirectResponseRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRedirectResponseRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaymentRO'
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN Requires authentication with user having assigned the following permissions:
             - Purchase (APP_B2B_PURCHASE, only in B2B applications)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /baskets/{BasketResourceKey}/payment-instruments:
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Adds a payment instrument to the basket.
      description: Adds a payment instrument to the basket. This creates new payment instrument in the basket.
      operationId: createPaymentInstrument_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The objects containing the initial data for creating a payment instrument.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PaymentInstrumentRO_v1'
      responses:
        201:
          description: The newly created payment instrument with the data provided.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentInstrumentCtnrRO_v1'
        422:
          description: A list of (semantical) error messages, if the payment instrument could not be created.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/payment-instruments/{PaymentInstrumentKey}:
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the payment instrument with the given ID.
      description: Deletes the payment instrument with the given ID. If no payment instrument with this ID is found, a 404 error will be returned.
      operationId: deletePaymentInstrument_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: PaymentInstrumentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentInstrumentCtnrRO_v1'
        404:
          description: If a payment instrument with the given ID is not found.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentInstrumentCtnrRO_v1'
  /baskets/{BasketResourceKey}/promotioncodes:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of promotion codes that have been applied at the selected basket.
      operationId: getPromotionCodes_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of promotion codes.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Adds a promotion code to the basket.
      operationId: addPromotionCode_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The promotion code to add.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketPromotionCodeRO_v1'
      responses:
        201:
          description: The newly added promotion code, if it was added successfully.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: A list of (semantical) error messages, if the promotion code could not be added.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/promotioncodes/{BasketPromotionCodeKey}:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the promotion code data for the given promotion code string.
      description: 'Returns the promotion code data for the given promotion code string.
        If no promotion code with this string is found, a 404 error will be returned. '
      operationId: getPromotionCode_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPromotionCodeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The promotion code data for the given promotion code string.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        404:
          description: If a promotion code with the given string is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Removes the promotion code with the given string from the basket.
      description: Removes the promotion code with the given string from the basket. If no address with this string is found, a 404 error will be returned.
      operationId: removePromotionCode_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketPromotionCodeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        404:
          description: If an promotion code with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
  /baskets/{BasketResourceKey}/attributes:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns (custom) attributes for the basket.
      operationId: getBasketAttributes_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of attributes.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Creates a new (custom) attribute at the basket.
      description: Creates a new (custom) attribute at the basket. The name of the attribute is used as identifier for the created sub resource. If an attribute with this name already exists or if an unknown type is passed or the value does not match the type, error 422 will be returned.
      operationId: createBasketAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        201:
          description: The created attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be created because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /baskets/{BasketResourceKey}/attributes/{BasketAttributeKey}:
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the attribute from the basket.
      description: Deletes the attribute from the basket. If no attribute with this name is found, a 404 error will be returned.
      operationId: deleteBasketAttribute_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketAttributeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        404:
          description: If an attribute with the given name is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Updates the basket attribute.
      description: Updates the basket attribute. Note that only the value may be changed; name and type of the attribute are immutable. An error with status code 422 will be returned in case the attribute could not be updated.
      operationId: updateBasketAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketAttributeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        200:
          description: The updated attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be updated because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /baskets/{BasketResourceKey}/eligible-shipping-methods:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of shipping methods that are eligible for the selected basket.
      description: Returns the list of shipping methods that are eligible for the selected basket. This will only return common shipping methods that are valid for all line items. If there are no common shipping methods, an empty list will be returned.
      operationId: getBasketEligibleShippingMethods_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of eligible shipping methods.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingMethodListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/validations:
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Validates the basket.
      description: Triggers a validation of the basket and returns the validation errors. Optionally, the basket is adjusted automatically (e. g. to remove unavailable line items).
      operationId: validateBasket_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the validation parameters.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketValidationRO_v1'
      responses:
        201:
          description: Returns the result of the validation.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketValidationCtnrRO_v1'
        422:
          description: Returns a list of (semantical) error messages, if the validation could not be executed.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
        401:
          description: Returns an error, if the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/items:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of line items for the selected basket.
      operationId: getLineItems_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of line items.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Adds one or more products to the basket.
      description: Adds one or more products to the basket. This creates new line items in the basket or, if a product already exists in the basket and merging is configured, increases the quantity of an existing line item. Note that this request may succeed partially, i. e. if three products are to be added and one fails because of semantical errors, the other two will still be added to the basket.
      operationId: createLineItems_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The objects containing the initial data for creating the line items.
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BasketLineItemRO_v1'
      responses:
        207:
          description: The created or merged line items and if some items could not be added an error list for those items. This response will be returned if there are different response codes for individual items.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemListCtnrRO_v1'
        200:
          description: The merged line items, if merging is enabled and all items were merged successfully.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemListCtnrRO_v1'
        201:
          description: The newly created line items, if all items were created successfully.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemListCtnrRO_v1'
        422:
          description: A list of (semantical) error messages, if no product could be added.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/items/{BasketLineKey}:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the line item for the given ID.
      description: 'Returns the line item for the given ID. If no line item with this
        ID is found, a 404 error will be returned. '
      operationId: getLineItem_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
        404:
          description: If a line item with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the line item with the given ID from the basket.
      description: Deletes the line item with the given ID from the basket. If no line item with this ID is found, a 404 error will be returned. If for some reason the line item could not be removed, a 422 error will be returned.
      operationId: deleteLineItem_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
        404:
          description: If a line item with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
        422:
          description: If the line item could not be deleted.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Partially updates the lineitem with the given ID.
      description: Partially updates the lineitem with the given ID. If no line item with this ID is found, a 404 error will be returned. If for some reason the line item could not be updated, a 422 error will be returned.
      operationId: updateLineItem_V1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the data to update the lineitem with the given ID.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketLineItemRO_v1'
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
        404:
          description: If a line item with the given ID is not found in the basket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
        422:
          description: If the line item could not be updated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketLineItemCtnrRO_v1'
  /baskets/{BasketResourceKey}/items/{BasketLineKey}/attributes:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns (custom) attributes for the line item.
      operationId: getLineItemAttributes_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of attributes.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Creates a new (custom) attribute at the line item.
      description: Creates a new (custom) attribute at the line item. The name of the attribute is used as identifier for the created sub resource. If an attribute with this name already exists or if an unknown type is passed or the value does not match the type, error 422 will be returned.
      operationId: createLineItemAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        201:
          description: The created attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be created because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /baskets/{BasketResourceKey}/items/{BasketLineKey}/attributes/{LineItemAttributeKey}:
    delete:
      tags:
      - Basket (beta)
      summary: __BETA__ | Deletes the attribute from the line item.
      description: Deletes the attribute from the line item. If no attribute with this name is found, a 404 error will be returned.
      operationId: deleteLineItemAttribute_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: LineItemAttributeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        404:
          description: If an attribute with the given name is not found in the line item.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    patch:
      tags:
      - Basket (beta)
      summary: __BETA__ | Updates the line item attribute.
      description: Updates the line item attribute. Note that only the value may be changed; name and type of the attribute are immutable. An error with status code 422 will be returned in case the attribute could not be updated.
      operationId: updateLineItemAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: LineItemAttributeKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        200:
          description: The updated attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be updated because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /baskets/{BasketResourceKey}/items/{BasketLineKey}/eligible-shipping-methods:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of shipping methods that are eligible for the selected line item.
      description: Returns the list of shipping methods that are eligible for the selected line item.
      operationId: getLineItemEligibleShippingMethods_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: BasketLineKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of eligible shipping methods.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketShippingMethodListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/merges:
    post:
      tags:
      - Basket (beta)
      summary: __BETA__ | Merge the basket with an other basket.
      description: 'Merge the basket (target basket) with an other basket (source
        basket). In that case, the source basket owner is not registered and the corresponding
        authentication token is not part of the payload, the source basket will be
        anonymized. Merge objects are the line items, recurrence information, and
        the affiliate informations. If the corresponding authentication token is part
        of the payload, the source basket will not be anonymized. In that case, the
        source basket owner is registered and is equals to the target basket owner,
        line items, addresses, recurrence information, promotion codes and affiliate
        informations will be merged. Generally not included in scope are the payments
        of the source basket. The source basket will removed after merge unless the
        payload of the request contains information to suppress this behavior.If no
        active basket with this ID is found for the user, a 404 error will be returned.
        If during the processing of the request a failure occurred, a 422 error with
        specific error cause is returned. Possible error keys are "basket.not_found.error",
        "basket.merge.invalid_token.error", "basket.merge.token_is_expired.error","basket.merge.source_basket_user_is_registered.error".Instead
        of an ID "current" may be specified to update the current active basket, if
        there is one. '
      operationId: mergeBasket_V1
      parameters:
      - name: include
        in: query
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing merge information like basket id and authentication token.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BasketMergeRO.v1'
      responses:
        201:
          description: The merge data
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketMergeCtnrRO.v1'
        404:
          description: If a basket with the given ID is not found in the list of user baskets.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketMergeCtnrRO.v1'
        422:
          description: If during the processing of the request a failure occurred, a 422 error with specific error cause is returned.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/BasketMergeCtnrRO.v1'
        401:
          description: If the user could not be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /baskets/{BasketResourceKey}/eligible-payment-methods:
    get:
      tags:
      - Basket (beta)
      summary: __BETA__ | Returns the list of payment methods that are eligible for the selected basket.
      description: Returns the list of payment methods that are eligible for the selected basket. If there are no eligible payment methods available, an empty list will be returned.
      operationId: getEligiblePaymentMethods_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: BasketResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of eligible payment methods.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentMethodListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.basket.v1+json:
              schema:
                type: string
  /localizations:
    get:
      tags:
      - localizations
      description: Computes a map that contains localized texts for the requested locale.
      operationId: getLocalizations
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        default:
          description: default response
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
            text/xml:
              schema:
                type: object
                additionalProperties:
                  type: string
  /localizations/{key}:
    get:
      tags:
      - localizations
      description: Computes the localized text for the given key in the requested locale.
      operationId: getLocalization
      parameters:
      - name: key
        in: path
        description: The key of the localized text
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        default:
          description: default response
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                type: string
            text/xml:
              schema:
                type: string
  /stores:
    get:
      tags:
      - Store Locator
      summary: Store locator
      description: Retrieves a list of stores and returns them to the client
      operationId: getStores
      parameters:
      - name: postalCode
        in: query
        description: a postal code, search expressions are supported
        schema:
          type: string
      - name: countryCode
        in: query
        description: country code in ISO format
        schema:
          type: string
      - name: city
        in: query
        description: city, search expressions are supported
        schema:
          type: string
      - name: storeName
        in: query
        description: name of the store, search expressions are supported
        schema:
          type: string
      - name: usePreference
        in: query
        description: If set to true, than request check if pick up in store preference is enabled. If usePreference is set to true and the pick up in store preference is disabled, than response contains no stores. If usePreference is set to false, the pick up in store preference will ignored and response contains all listed stores.
        schema:
          type: boolean
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreROResourceCollection'
            text/xml:
              schema:
                $ref: '#/components/schemas/StoreROResourceCollection'
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /cms:
    get:
      tags:
      - CMS (beta)
      summary: Returns the list of CMS sub resources.
      operationId: getCMSResources
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
  /cms/viewcontexts/{viewContextID}:
    get:
      tags:
      - CMS (beta)
      summary: Returns a specific view context of the domain.
      description: The view context must be published during the request. Note that content templating is currently not supported. Note that Enhanced Content Sharing is currently not supported.
      operationId: getViewContext
      parameters:
      - name: viewContextID
        in: path
        description: The view context id. Can be qualified with the resource-set id
        required: true
        schema:
          type: string
        example: vc_productList
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /cms/viewcontexts:
    get:
      tags:
      - CMS (beta)
      summary: Returns all view contexts of the domain.
      operationId: getViewContexts
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /cms/viewcontexts/{viewContextID}/entrypoint:
    get:
      tags:
      - CMS (beta)
      summary: Resolves a page for a viewing-context. Dependend on the type of the view context query-parameters have to be specified.
      operationId: resolvePageletEntryPoint
      parameters:
      - name: viewContextID
        in: path
        description: The view context id. Can be qualified with the resource-set id
        required: true
        schema:
          type: string
        example: vc_productList
      - name: depth
        in: query
        description: The depth of how far the slot/pagelet relations should be resolved. Further on from this depth links are used instead of resource objects.
        schema:
          minimum: 0
          type: integer
          format: int64
          default: 2147483647
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /cms/includes:
    get:
      tags:
      - CMS (beta)
      summary: Returns the list of all includes.
      description: Includes are PageletEntryPoint objects with page-flag set to false
      operationId: getIncludes
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
  /cms/includes/{includesKey}:
    get:
      tags:
      - CMS (beta)
      summary: Returns a specific include.
      description: The include must be published during the request. Note that content templating is currently not supported. Note that Enhanced Content Sharing is currently not supported.
      operationId: getInclude
      parameters:
      - name: depth
        in: query
        description: The depth limit of how far a given include composition should be resolved. Further on from this depth links are used instead of resource objects.
        schema:
          minimum: 0
          type: integer
          format: int64
          default: 2147483647
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: includesKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageletEntryPointRO'
  /cms/pagelets:
    get:
      tags:
      - CMS (beta)
      summary: Returns the list of all published pagelets of the domain.
      description: Also all pagelets which are shared to this domain will be shown.
      operationId: getPagelets
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
  /cms/pagelets/{pageletsKey}:
    get:
      tags:
      - CMS (beta)
      summary: Returns a specific pagelet of the domain.
      description: The pagelet must be published during the request. Note that content templating is currently not supported. Note that Enhanced Content Sharing is currently not supported.
      operationId: getPagelet
      parameters:
      - name: depth
        in: query
        description: The depth of how far the slot/pagelet relations should be resolved. Further on from this depth links are used instead of resource objects.
        schema:
          minimum: 0
          type: integer
          format: int64
          default: 2147483647
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: pageletsKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageletRO'
  /cms/pagelets/{pageletsKey}/{slotsKey}:
    get:
      tags:
      - CMS (beta)
      summary: Returns a specific slot of a pagelet.
      description: The pagelet must be published during the request and the slot must exist.
      operationId: getSlot
      parameters:
      - name: depth
        in: query
        description: The depth of how far the slot/pagelet relations should be resolved. Further on from this depth links are used instead of resource objects.
        schema:
          minimum: 0
          type: integer
          format: int64
          default: 2147483647
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: pageletsKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: slotsKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotRO'
  /cms/pages:
    get:
      tags:
      - CMS (beta)
      summary: Returns the list of all pages.
      description: Pages are PageletEntryPoint objects with page-flag set to true
      operationId: getPages
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
  /cms/pages/{pagesKey}:
    get:
      tags:
      - CMS (beta)
      summary: Returns a specific page.
      description: The page must be published during the request. Note that content templating is currently not supported. Note that Enhanced Content Sharing is currently not supported.
      operationId: getPage
      parameters:
      - name: depth
        in: query
        description: The depth limit of how far a given page composition should be resolved. Further on from this depth links are used instead of resource objects.
        schema:
          minimum: 0
          type: integer
          format: int64
          default: 2147483647
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: pagesKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageletEntryPointRO'
  /cms/pages/slots:
    get:
      tags:
      - CMS (beta)
      summary: Returns a specific slot of a pagelet.
      description: The pagelet must be published during the request and the slot must exist.
      operationId: getSlot_1
      parameters:
      - name: depth
        in: query
        description: The depth of how far the slot/pagelet relations should be resolved. Further on from this depth links are used instead of resource objects.
        schema:
          minimum: 0
          type: integer
          format: int64
          default: 2147483647
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotRO'
  /filters:
    get:
      tags:
      - Search
      summary: Return defined facet filters
      description: Get a collection of all defined filters with their related facets and products. If optional parameters CategoryName and/or CategorsDomainName are defined, the related filters are returned.
      operationId: getFilters
      parameters:
      - name: CategoryDomainName
        in: query
        description: The domain in which the category "lives"
        schema:
          type: string
      - name: CategoryName
        in: query
        description: The category name which defines the category search context
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        404:
          description: Not Found (Invalid category name and/or category domain name parameter)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /filters/{SearchIndexFilterResourceKey}/hits:
    get:
      tags:
      - Search
      summary: Return product links for the selected filter
      description: Get a list of product links for a facet/filter. 'SearchParameter' is a matrix parameter
      operationId: getHits
      parameters:
      - name: Filter ID
        in: path
        description: ID of filter
        required: true
        schema:
          type: string
      - name: SearchParameter
        in: query
        description: Search parameters as matrix parameter after Filter ID
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: the result number (product number) the response will start with
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        description: the amount of returned products
        schema:
          type: integer
          format: int32
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: SearchIndexFilterResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        default:
          description: default response
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionROLinkRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionROLinkRO'
  /filters/{SearchIndexFilterResourceKey}:
    get:
      tags:
      - Search
      summary: Return defined facet filters in the context of a selected filter
      description: Get a collection of all defined filters with their related facets and products, based on an selected filter. 'SearchParameter' is a matrix parameter. URI part 'filter id' and 'SearchParameter' specify the superordinate/ already selected filter.
      operationId: getFilter
      parameters:
      - name: Filter ID
        in: path
        description: ID of filter
        required: true
        schema:
          type: string
      - name: SearchParameter
        in: query
        description: Search parameters as matrix parameter after Filter ID
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: SearchIndexFilterResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /suggest:
    get:
      tags:
      - Search
      summary: Retrieves the suggestions for a search term
      description: Retrieves search suggestions from the installed search engine for a search term. If no search engine is active or the are no suggestions available for the given search term an empty collection is returned.
      operationId: getSuggestTerms
      parameters:
      - name: SearchTerm
        in: query
        description: Defines the search term to find suggestion for
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        default:
          description: default response
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json: {}
            text/xml: {}
  /countries:
    get:
      tags:
      - Country (beta)
      summary: __BETA__ | Returns the available countries for the channel.
      description: Returns the available countries for the channel.
      operationId: getCountries_V1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: The list of available countries.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.country.v1+json:
              schema:
                $ref: '#/components/schemas/GeoObjectListCtnrRO_v1'
  /countries/{countryCode}/main-divisions:
    get:
      tags:
      - Country (beta)
      summary: __BETA__ | Returns the available maindivisions for given country code.
      description: Returns the available maindivisions for given country code. If country with this code is not found a 404 error will be returned.
      operationId: getMainDivisions_V1
      parameters:
      - name: countryCode
        in: path
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: The list of available maindivisions.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.country.v1+json:
              schema:
                $ref: '#/components/schemas/GeoObjectListCtnrRO_v1'
        404:
          description: If a country with the given code is not found.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.country.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
  /countries/{countryCode}:
    get:
      tags:
      - Country (beta)
      summary: __BETA__ | Returns the country details for given country code.
      description: Returns the country details for given country code. If country with this code is not found a 404 error will be returned.
      operationId: getCountry_V1
      parameters:
      - name: countryCode
        in: path
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: The requested country details.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.country.v1+json:
              schema:
                $ref: '#/components/schemas/GeoObjectCtnrRO_v1'
        404:
          description: If a country with the given code is not found.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.country.v1+json:
              schema:
                $ref: '#/components/schemas/FeedbackCtnrRO_v1'
  /products:
    get:
      tags:
      - Product
      summary: Get a list of products by global product search
      description: "ResourceCollectionRO contains objects of type LinkRO. If the REST\
        \ call is an authenticated one, spgid parameter should \nbe provided also\
        \ in the request URL or the request will be considered anonymous, even if\
        \ Authorization \nheader is provided. The personalization id can be retrieved\
        \ using /personalization call"
      operationId: getProductsListResource
      parameters:
      - name: pageable
        in: query
        description: the ID of the respective pageable
        schema:
          type: string
      - name: offset
        in: query
        description: the pageable offset
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        description: the pageable amount
        schema:
          type: integer
          format: int32
      - name: sortKey
        in: query
        description: can be in {name-asc, name-desc, value-asc, value-desc}
        schema:
          type: string
      - name: returnSortKeys
        in: query
        schema:
          type: boolean
      - name: productFilter
        in: query
        schema:
          type: string
      - name: searchTerm
        in: query
        description: Search Term with wildcards
        schema:
          type: string
      - name: attrs
        in: query
        description: |-
          attrs can contain the following attribute names separated by comma:
           - productName: name of the product

           - listPrice: list price information

           - salePrice: sale price information

           - image: URL to a product thumbnail image

           - sku: product ID

           - averageRating: average user evaluation score

           - roundedAverageRating: rating

           - availability: product status

           - availableStock: contains the quantity which is available for sale

           - inStock

           - minOrderQuantity: minimum oder quantity

           - manufacturer

           - packingUnit: the packing unit

           - productMaster: flag if product is a master product

           - productMasterSKU: the SKU of the master product if product is a variation product

           - mastered:  flag if the product is a variation product

           - shortDescription: a minimal item description

           - timeToDelivery: the possible delivery methods with delivery times

           - defaultCategory: the default category

           - retailSet: the retail set

           - promotions: the possible promotions
        schema:
          type: string
      - name: attributeGroup
        in: query
        description: the ID of the respective pageable
        schema:
          type: string
      - name: view
        in: query
        description: |-
          defines the ID of the selected view,
           the views are defined in a WebshopREST.properties file.The file should exist on domain level.
           The parameter `view` and the parameter `attrs` can be combined.
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/categories:
    get:
      tags:
      - Product
      - Categories
      summary: Get product assigned categories
      description: "Get list of Links of the implicitly and explicitly assigned categories\
        \ to a product. If the REST call is an authenticated one, spgid parameter\
        \ should \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getCategoriesResource
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}:
    get:
      tags:
      - Product
      summary: Get information for a product
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getProductSingle
      parameters:
      - name: attrs
        in: query
        schema:
          type: string
      - name: view
        in: query
        schema:
          type: string
      - name: imageView
        in: query
        schema:
          type: string
      - name: imageType
        in: query
        schema:
          type: string
      - name: allImages
        in: query
        schema:
          type: string
      - name: basketId
        in: query
        schema:
          type: string
      - name: invoiceToAddressId
        in: query
        schema:
          type: string
      - name: shipToAddressId
        in: query
        schema:
          type: string
      - name: shipFromAddressId
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/reviews/{reviewID}:
    get:
      tags:
      - Product
      - Rating and Review
      summary: Get a product review by its ID
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getProductReviewByIDGETReviews
      parameters:
      - name: reviewID
        in: path
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ReviewRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Product
      - Rating and Review
      summary: Deletes a product review by its ID
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: deleteProductReviewByIDDELETEReviews
      parameters:
      - name: reviewID
        in: path
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/variations/search:
    post:
      tags:
      - Product
      summary: Search product variation for a product by product attributes.
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: searchVariationsPOST
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ProductSearchAttributesRO'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchAttributesRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/variations:
    get:
      tags:
      - Product
      summary: Get a list of variations for a product
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getVariationsGET
      parameters:
      - name: pageable
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        schema:
          type: integer
          format: int32
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/reviews:
    get:
      tags:
      - Product
      - Rating and Review
      summary: Get a list of reviews for a product
      description: "ResourceCollectionRO contains objects of type LinkRO. If the REST\
        \ call is an authenticated one, spgid parameter should \nbe provided also\
        \ in the request URL or the request will be considered anonymous, even if\
        \ Authorization \nheader is provided. The personalization id can be retrieved\
        \ using /personalization call"
      operationId: getProductReviewsGET
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Product
      - Rating and Review
      summary: Add new product review
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: addReviewPOST
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/ReviewRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/LinkRO'
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: Internal Server Error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/promotions:
    get:
      tags:
      - Product
      - Promotion
      summary: Get the applicable promotions for a product
      description: "ResourceCollectionRO contains objects of type LinkRO\n 'uri' attributs\
        \ will point to invalid locations in 7.4 \n - invalid: {siteName}/-/categories/{catID}/{subCatID}/.../products/{sku}/promotions/{promotionID}\
        \ \n - workaround: cut the uri to {siteName}/-/promotions/{promotionID}\n\
        \ \n fixed in 7.5. If the REST call is an authenticated one, spgid parameter\
        \ should \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getProductPromotionsGETpromo
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/crosssells:
    get:
      tags:
      - Product
      summary: Get product cross sells
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getProductCrossSellsGETcross
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/bundles:
    get:
      tags:
      - Product
      summary: Get product bundles
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getBundledProductsGETbundles
      parameters:
      - name: pageable
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        schema:
          type: integer
          format: int32
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/partOfRetailSet:
    get:
      tags:
      - Product
      summary: Get product part of retail set
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getPartOfRetailSetGETRetailSet
      parameters:
      - name: pageable
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
      - name: amount
        in: query
        schema:
          type: integer
          format: int32
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /products/{productKey}/links:
    get:
      tags:
      - Product
      summary: Get product links
      description: "If the REST call is an authenticated one, spgid parameter should\
        \ \nbe provided also in the request URL or the request will be considered\
        \ anonymous, even if Authorization \nheader is provided. The personalization\
        \ id can be retrieved using /personalization call"
      operationId: getProductLinksGETProductLinks
      parameters:
      - name: linkType
        in: query
        schema:
          type: string
      - name: targetObject
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: productKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /personalization:
    get:
      tags:
      - Personalization
      summary: Returns a unique personalization ID based on user credentials
      operationId: getPersonalizationInfo
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizationRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PersonalizationRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /security/reminder:
    post:
      tags:
      - Security
      summary: Request password reminder e-mail
      description: |-
        If the client submits a login e-mail address, first and last name and the answer to the security question set during the registration then an e-mail will be sent to the customer, or customer's user, containing a link to reset their password.
         This feature depends on correctly configured preferences for "Forgotten password" functionality and  "SecurityQuestion".
      operationId: sendPassword
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReminderRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PasswordReminderRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             in case when submitted data is missing or invalid
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: Internal Server Error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /security/questions:
    get:
      tags:
      - Security
      summary: Get list of security questions
      operationId: getSecurityQuestions
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityQuestionsCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/SecurityQuestionsCollectionRO'
  /security/password:
    post:
      tags:
      - Security
      summary: Reset password of registered user.
      description: |-
        If the client submits a valid user ID and  secure code then password of the related user will be reset to the provided new password value.
         User ID and secure hash code are available in the "Change Password" link of password reminder e-mail, send to the user.
      operationId: resetPassword
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        description: Request body containing user identification and new password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PasswordResetRO'
      responses:
        204:
          description: Password reset finished successfully. No content in the response body.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             in case when submitted data is missing or invalid.
             userID should represent registered and non disabled user in the current application.
             Provided secure code should match to the secure code of the related user generated when sending Password Reminder e-mail.
             Secure code should not be expired at the time this REST call is made.
             New Password provided should match to the password validation rules configured for the current application. Possible values for header error-key:
             - customer.credentials.passwordreset.missing_fields.error
             - customer.credentials.passwordreset.invalid_fields.error
             - customer.credentials.passwordreset.invalid_password.error.PasswordExpressionViolation
             - customer.credentials.passwordreset.invalid_password.error.PasswordRecentlyUsed
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: In case of expired secure code for reset password.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        422:
          description: If for some reason valid new password could not be stored
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /promotions/{promotionID}:
    get:
      tags:
      - Promotion
      summary: Get relevant details for a promotion
      operationId: getPromotionByID
      parameters:
      - name: promotionID
        in: path
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PromotionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /promotions:
    get:
      tags:
      - Promotion
      summary: Get a personalized list of promotions available for the store
      description: Response Resource Collection contains objects of Type LinkRO
      operationId: getPromotions
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /captcha:
    get:
      tags:
      - Captcha
      summary: get captcha code
      description: |-
        Responds with script snippet containing CAPTCHA challenge.
         Workflow:
         - Send a request to a protected resource.
         - Detect the status 401 Authorization required.
         - Determine the authentication scheme and the necessary parameters.
         - Display the CAPTCHA a human user can solve.
         - Re-send the request including the CAPTCHA challenge and solution.
         At least on CAPTCHA service must be configured as enabled for the application/site. Otherwise the resource will return an error.
      operationId: getCaptchaCode
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            '*/*':
              schema:
                type: string
        500:
          description: |-
            Internal Server Error
             response headers will include required fields:
             `RequiredFields: recaptcha_challenge_field,recaptcha_response_field`
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /contact:
    get:
      tags:
      - Contact
      summary: Get subjects for "Contact Us"
      description: Returns a list of subject that has to be used when "Contact Us" e-mail is requested.
      operationId: getSubjects
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactUsROResourceCollection'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContactUsROResourceCollection'
    post:
      tags:
      - Contact
      summary: Send "Contact us" e-mail
      description: Triggers sending of "Contact Us" e-mail with data submitted with the request.
      operationId: sendMessage
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/ContactRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             in case when submitted data is missing or invalid
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - helpdesk.contact_us_not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: |-
            Internal Server Error
             possible values for header error-key:
             - helpdesk.mail_not_sent.message
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts:
    post:
      tags:
      - Recommendation
      summary: Creates a new Recommendation Context
      description: The call is not mandatory - any other alpha-numeric string can be used instead
      operationId: createContext
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts/{RecommendationContextKey}/searchrecommendations:
    get:
      tags:
      - Recommendation
      summary: Get recommended products for the given search term
      description: If a recommendation service is configured this call returns a list of recommended products for the given search term. The result list strongly depends on the configuration of the recommendation engine and on the back office preferences in 'Channel preferences / Recommendation Engines'. If the request type SearchRecommendationRequest is not activated then an empty list is returned. The used <contextid> can be any alpha-numeric string. It will be used to distinguish between different users/customers.
      operationId: getProductRecommendationsSearchRequest
      parameters:
      - name: searchTerm
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: RecommendationContextKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        400:
          description: Bad request(when missing query parameter searchTerm)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts/{RecommendationContextKey}/topsellerrecommendations:
    get:
      tags:
      - Recommendation
      summary: Get recommended global topseller products
      description: If a recommendation service is configured this call returns a list of recommended global top-seller products. The result list strongly depends on the configuration of the recommendation engine and on the back office preferences in 'Channel preferences / Recommendation Engines'. If the request type TopsellerRecommendationRequest is not activated then an empty list is returned. The used <contextid> can be any alpha-numeric string. It will be used to distinguish between different users/customers.
      operationId: getProductRecommendationsTopsellerRequest
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: RecommendationContextKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts/{RecommendationContextKey}/userrecommendations:
    get:
      tags:
      - Recommendation
      summary: Get recommended products for the assigned user
      description: If a recommendation service is configured this call returns a list of recommended products for the assigned user. The assignment of an user to the context-ID has to be done before with a separate REST Call (see UserToSessionRecommendationEvent at REST API - Recommendation events). The result list strongly depends on the configuration of the recommendation engine and on the back office preferences in 'Channel preferences / Recommendation Engines'. If the request type UserRecommendationRequest is not activated then an empty list is returned. The used <contextid> can be any alpha-numeric string. It will be used to distinguish between different users/customers.
      operationId: getProductRecommendationsUserRequest
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: RecommendationContextKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts/{RecommendationContextKey}/basketrecommendations:
    get:
      tags:
      - Recommendation
      summary: Get recommended Products for the basket with the given basketID
      description: If a recommendation service is configured, this call returns a list of recommended products for the given basket. The resulting list strongly depends on the configuration of the recommendation engine and on the back office preferences in 'Channel preferences / Recommendation Engines'. If the request type BasketRecommendationRequest is not activated then an empty list is returned. The used <contextid> can be any alpha-numeric string. It will be used to distinguish between different users/customers.
      operationId: getBasketRecommendations
      parameters:
      - name: basketID
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: RecommendationContextKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts/{RecommendationContextKey}/productrecommendations:
    get:
      tags:
      - Recommendation
      summary: Get recommended products for the given produkt(sku)
      description: If a recommendation service is configured this call returns a list of recommended products for the given product ID (SKU). The result list strongly depends on the configuration of the recommendation engine and on the back office preferences in 'Channel preferences / Recommendation Engines'. If the request type ProductRecommendationRequest is not activated then an empty list is returned.The used <contextid> can be any alpha-numeric string. It will be used to distinguish between different users/customers.
      operationId: getProductRecommendationsProductRequest
      parameters:
      - name: productID
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: RecommendationContextKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        400:
          description: Bad request(when missing query parameter)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /recommendationcontexts/{RecommendationContextKey}/events:
    post:
      tags:
      - Recommendation
      summary: Sends an event to the recommendation engine
      description: "If a recommendation service is configured this sends one of the\
        \ following events to the recommendation engine:\n - ProductViewRecommendationEvent\
        \ - The product with given ID [SKU] that has been viewed.\n - BasketRecommendationEvent\
        \ - The items that have been added to the basket. \n - OrderRecommendationEvent\
        \ - The items that have been ordered or the order with the given order number\
        \ which were submitted.\n - SearchRecommendationEvent - A search with given\
        \ search term has been processed\n - UserToSessionRecommendationEvent - Connects\
        \ the current recommendation context with the given userid (after login).\
        \ This event may affect the results of the recommendation requests.\n \n The\
        \ event can only be dispatched successfully if the installed Recommendation\
        \ Engines support the event type and if the corresponding back office  preference\
        \ in 'Channel preferences / Recommendation Engines' is activated for the given\
        \ event type. The used <contextid> can be any alpha-numeric string. It will\
        \ be used to distinguish between different users/customers."
      operationId: sendEvent
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: RecommendationContextKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationEventRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/RecommendationEventRO'
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /orders:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the list of orders for the user.
      description: Returns the list of orders for the user. If user authentication fails, a 401 error with body string 'Unauthorized' is returned.
      operationId: getOrders_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: filter[statusCode]
        in: query
        description: Filters orders by their (case-sensitive) order status.
        schema:
          type: string
          default: ""
        example: filter[statusCode]=NEW,PENDING
      - name: page[limit]
        in: query
        description: Limits the number of orders returned in th response.
        schema:
          type: integer
          format: int32
        example: page[limit]=10
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: The list of orders.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
        422:
          description: In case of semantical errors of the request, e.g. invalid status code filter.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
    post:
      tags:
      - Order (beta)
      summary: __BETA__ | Creates a new order for the user from a given basket.
      description: Creates a new order for the user from a given basket. If the basket is not valid or there are other errors during order creation, then status 422 together with a cause description is returned. If user authentication fails, a 401 error with body string 'Unauthorized' is returned.
      operationId: createOrder_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        description: The object containing the required data for the order creation.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderRO_v1'
      responses:
        201:
          description: The created order if the process finished successfully.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        202:
          description: If the order was created, but additional steps need to be performed before the order creation is finished (e. g. a redirect to the payment service provider). A "PATCH" request on the order item resource needs to be invoked afterwards to continue the order creation process.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        422:
          description: If the order could not be created because of semantical errors.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
  /orders/{orderKey}:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the order with the given ID.
      description: Returns the order with the given ID for the user. If no order with this ID is found, a 404 error will be returned. If user authentication fails, a 401 error with body string 'Unauthorized' is returned. Error 403 is returned, if the user does not have the required access privileges. Error 410 is returned, if order is abort with payment canceled.
      operationId: getOrder_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The order with the given ID.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        404:
          description: If no order is found.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        401:
          description: If the user could not be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
        403:
          description: If the user does not have the required access privileges.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
        410:
          description: If order is abort with payment canceled.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
    put:
      tags:
      - Order (beta)
      summary: Cancel an order
      description: |-
        Cancel an Order.
         If successfull, `status` of returned OrderRO is CANCELED
      operationId: cancelOrder
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/OrderRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/OrderRO'
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - order.wrong_status
             - order.cancel.error
             - order.cancel.not_possible.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict
             possible values for header error-key:
             - order.cancel.not_possible.status
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    patch:
      tags:
      - Order (beta)
      summary: __BETA__ | Updates the order with the given ID.
      description: Updates the order with the given ID. This is currently only used to continue an interrupted order creation process (e. g. because of a payment which required a redirect) by setting the "orderCreation.status" field to "CONTINUE". If there are errors during the continued order process, status 422 with an appropriate cause description is returned. If no order with this ID is found for the user, a 404 error will be returned. If user authentication fails, a 401 error with body string "Unauthorized" is returned.
      operationId: updateOrder_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the data to update the order with the given ID.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderRO_v1'
      responses:
        200:
          description: The updated order if the order process is completed.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        202:
          description: If the order process was continued, but additional steps need to be performed by the client before the order creation is finished (e. g. another redirect to a different payment service provider).
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        422:
          description: If the order could not be updated because of semantical errors.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        404:
          description: If an order with the given ID is not found in the list of user orders.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderCtnrRO_v1'
        401:
          description: If the user could not be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
  /orders/{orderKey}/attributes:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns (custom) attributes for the order.
      operationId: getOrderAttributes_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of attributes.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    post:
      tags:
      - Order (beta)
      summary: __BETA__ | Creates a new (custom) attribute at the order.
      description: Creates a new (custom) attribute at the order. The name of the attribute is used as identifier for the created sub resource. If an attribute with this name already exists or if an unknown type is passed or the value does not match the type, error 422 will be returned.
      operationId: createOrderAttribute_V1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        201:
          description: The created attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be created because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /orders/{orderKey}/costobjects:
    get:
      tags:
      - Costobject
      - Order
      summary: Get the cost objects assigned to the selected order
      description: ResourceCollectionRO contains elements of type LinkRO
      operationId: getOrderCostObjectAssignments
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - View Cost Object (APP_B2B_VIEW_COSTOBJECT)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /orders/{orderKey}/costobjects/{OrderCostObjectAssignmentKey}:
    get:
      tags:
      - Costobject
      - Order
      summary: Get a specific cost object assigned to the selected order
      operationId: getOrderCostObjectAssignment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: OrderCostObjectAssignmentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostObjectAssignmentRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/CostObjectAssignmentRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - View Cost Object (APP_B2B_VIEW_COSTOBJECT)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /orders/{orderKey}/items:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the list of line items for the selected order.
      operationId: getLineItems_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of line items.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderLineItemListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
  /orders/{orderKey}/items/{LineItemKey}:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the line item for the given ID.
      description: 'Returns the line item for the given ID. If no line item with this
        ID is found, a 404 error will be returned. '
      operationId: getLineItem_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: LineItemKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderLineItemCtnrRO_v1'
        404:
          description: If a line item with the given ID is not found in the order.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderLineItemCtnrRO_v1'
  /orders/{orderKey}/items/{LineItemKey}/attributes:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns (custom) attributes for the line item.
      operationId: getLineItemAttributes_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: LineItemKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of attributes.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
    post:
      tags:
      - Order (beta)
      summary: __BETA__ | Creates a new (custom) attribute at the line item.
      description: Creates a new (custom) attribute at the line item. The name of the attribute is used as identifier for the created sub resource. If an attribute with this name already exists or if an unknown type is passed or the value does not match the type, error 422 will be returned.
      operationId: createLineItemAttribute_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: LineItemKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the attribute data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttributeRO_v1'
      responses:
        201:
          description: The created attribute.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
        422:
          description: If the attribute could not be created because of semantical errors in the passed data.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/ContainerRO_v1'
  /orders/{orderKey}/buckets:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the list of shipping buckets for the selected order.
      description: Returns the list of shipping buckets for the selected order. Note that buckets are built dynamically and are not persisted. Bucket assignments and IDs could change if items are moved to a different bucket (by changing ship-to address or shipping method of a line item). It is therefore recommended to always retrieve the list of buckets before performing any operation on a single bucket.
      operationId: getShippingBuckets_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of shipping buckets.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderShippingBucketListCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
  /orders/{orderKey}/buckets/{ShippingBucketKey}:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the shipping bucket with the given ID.
      description: Returns the shipping bucket with the given ID. If no shipping bucket with this ID is found, a 404 error will be returned. Note that this could also mean that items have been added or removed from the bucket, as buckets are not persisted and IDs are determined dynamically through a hash over all items in the bucket. If such changes occur, the shipping bucket list needs to be retrieved again before working on single buckets.
      operationId: getShippingBucket_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: ShippingBucketKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The shipping bucket.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderShippingBucketCtnrRO_v1'
        404:
          description: If a shipping bucket with the given ID is not found in the order.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/OrderShippingBucketCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
  /orders/{orderKey}/payments:
    get:
      tags:
      - Order (beta)
      summary: __BETA__ | Returns the list of payments assigned to the order.
      operationId: getPayments_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: The list of payments.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
        401:
          description: If the user couldn't be authenticated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                type: string
  /orders/{orderKey}/payments/{PaymentKey}:
    patch:
      tags:
      - Order (beta)
      summary: __BETA__ | Updates the payment.
      description: Updates the payment. If the payment could not be updated, a 422 error will be returned. Note that this will only allow to set/update redirect data, e.g. the return URLS'. Other changes are not supported and will be ignored.
      operationId: updatePayment_V1_1
      parameters:
      - name: include
        in: query
        description: Related objects (as a comma separated list) which are to be included with the response.
        schema:
          type: string
          default: ""
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: orderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: PaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        description: The object containing the updated redirect data for the payment.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PaymentRO_v1'
      responses:
        200:
          description: Information message describing success status.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
        422:
          description: If the payment could not be updated.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/vnd.intershop.order.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentCtnrRO_v1'
  /categories:
    get:
      tags:
      - Categories
      summary: Retrieve the top-level navigation data (list of top-level categories)
      description: "There request retrieves the top-level categories. \nThe categories\
        \ are sorted by position or by custom created sorting in the backoffice.There\
        \ are no further parameters to control the response data.\nThe response is\
        \ a JSON data structure containing a list with the retrieved categories. If\
        \ the REST call is an authenticated one, spgid parameter should \nbe provided\
        \ also in the request URL or the request will be considered anonymous, even\
        \ if Authorization \nheader is provided. The personalization id can be retrieved\
        \ using /personalization call"
      operationId: getCategoryListResource
      parameters:
      - name: imageView
        in: query
        description: 'restricts category images only to a certain view. Example: `imageView=front`'
        schema:
          type: string
      - name: imageType
        in: query
        description: 'restricts category images only to a certain type. Example: `imageType=2XS`'
        schema:
          type: string
      - name: allImages
        in: query
        description: 'specifies whether images in all image views and image types
          should be provided. Default: `true`'
        schema:
          type: string
      - name: view
        in: query
        description: 'triggers hierarchical view. Default: `tree`'
        schema:
          type: string
      - name: limit
        in: query
        description: the number of levels to be returned (depth)
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
  /categories/{categoriesKey}:
    get:
      tags:
      - Categories
      summary: Returns info about (sub-) category
      description: "Returns info about (sub-) category. Custom attributes are also\
        \ included for all (sub-)categories, if they are maintained. The categories\
        \ are sorted by position or by custom created sorting in the backoffice. If\
        \ the REST call is an authenticated one, spgid parameter should \nbe provided\
        \ also in the request URL or the request will be considered anonymous, even\
        \ if Authorization \nheader is provided. The personalization id can be retrieved\
        \ using /personalization call"
      operationId: getCategory
      parameters:
      - name: view
        in: query
        description: 'triggers hierarchical view. Default: `tree`'
        schema:
          type: string
      - name: limit
        in: query
        description: the number of levels to be returned (depth)
        schema:
          type: string
      - name: imageView
        in: query
        description: 'restricts category images only to a certain view. Example: `imageView=front`'
        schema:
          type: string
      - name: imageType
        in: query
        description: 'restricts category images only to a certain type. Example: `imageType=2XS`'
        schema:
          type: string
      - name: allImages
        in: query
        description: 'specifies whether images in all image views and image types
          should be provided. Default: `true`'
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: categoriesKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/CategoryRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /categories/{categoriesKey}/links:
    get:
      tags:
      - Categories
      summary: Get category links by link type and target objects
      description: Retrieves a list of products and a list of categories linked by the given category and filtered by the provided link type/target object.
      operationId: getCategoryLinks
      parameters:
      - name: linkType
        in: query
        description: specifies the type of links to retrieve
        schema:
          type: string
      - name: targetObject
        in: query
        description: '`category`/`product`: specifies retrieval either of category
          or product links'
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: categoriesKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible value for header error-key:
             - category.links.query.invalid_parameters.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/simple:
    post:
      tags:
      - Customer
      summary: Create Customer
      description: simplified creation process for new customerwith minimal information
      operationId: createAccount
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/CredentialsRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict
             possible values for header error-key:
             - customer.already_exists.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        501:
          description: |-
            Not implemented
             possible values for header error-key:
             - customer.simpleaccount.not_possible.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers:
    post:
      tags:
      - Customer
      summary: Create individual customer
      description: Creates an individual customer. Available for unregistered users only.
      operationId: createCustomer
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomerRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewCustomerRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - customer.already_exists.error
             - customer.customerno.already_exists.error
             - customer.missing_fields.error
             - customer.invalid_fields.error
             - customer.credentials.missing_fields.error
             - customer.credentials.login.not_acceptable.error
             - customer.credentials.login.not_unique.error
             - customer.credentials.password.invalid.error
             - customer.address.missing_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: Conflict
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}:
    get:
      tags:
      - Customer
      summary: Get current customer profile details
      operationId: getCustomer
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateCustomerRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PrivateCustomerRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Customer
      summary: Upates a customer
      operationId: updateCustomer
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateCustomerRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PrivateCustomerRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateCustomerRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PrivateCustomerRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/addresses:
    get:
      tags:
      - Address
      summary: Get customer addresses list
      description: Returns a list of links to customer addresses resources
      operationId: getAddresses
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Address
      summary: Create new customer address
      description: Creates a new customer address by using POST data provided by the client
      operationId: createAddress
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddressRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - customer.address.invalid_fields.usage.error
             - customer.address.missing_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - customer.address.not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/addresses/{CustomerAddressKey}:
    get:
      tags:
      - Address
      summary: Get customer address details
      description: Returns details about customer's address to the client
      operationId: getAddress
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddressRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - customer.address_not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Address
      summary: Update customer address
      description: Updates a customer address with address data provided from the client
      operationId: updateAddress
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddressRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: "Bad request\n possible values for header error-key:\n - customer.address.missing_fields.error\n\
            \ - customer.address.update.error.inconsistentUsage\n Other errors (`customer.address.update.error.failureCode`)\
            \  may be returned if `AddressUpdateHandlers` are registered "
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             possible values for header error-key:
             - customer.address.update.error.AddressNotUpdatable
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - customer.address.not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Address
      summary: Delete customer address
      description: Deletes a customer address
      operationId: deleteAddress
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict
             possible values for header error-key:
             - customer.address.deletion.error.LastAddress
             - customer.address.deletion.error.WrongAddressRepository
             Other errors (`customer.address.deletion.error.failureCode`)  may be returned if additional `AddressDeletionHandlers` are registered
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/addresses/{CustomerAddressKey}/suggestions:
    get:
      tags:
      - Address
      summary: Get list of links to suggested addresses
      description: Returns a list of resources links that a client could access to view suggested addresses details
      operationId: getAddressesLinks
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key
             - customer.address_not_found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/addresses/{CustomerAddressKey}/suggestions/{CustomerAddressItemSuggestionKey}:
    get:
      tags:
      - Address
      summary: Get suggested address details
      description: Returns details about suggested address to the client
      operationId: getSuggestedAddress
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressItemSuggestionKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddressRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - customer.address_not_found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Address
      summary: Update address details as suggested
      description: Updates address details by using the ones provided from the suggestion address
      operationId: update
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerAddressItemSuggestionKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddressRO'
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - customer.address_not_found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/recurringorders:
    get:
      tags:
      - Recurring Order (Subscriptions)
      summary: Returns a list of recurring orders of the given individual customer
      description: 'B2B: Returns a list of links of all recurring orders for the customer.
        Account administrator permissions required'
      operationId: getRecurringOrders
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringOrderLinkROResourceCollection'
            text/xml:
              schema:
                $ref: '#/components/schemas/RecurringOrderLinkROResourceCollection'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        501:
          description: |-
            Not implemented (if the recurring order feature is disabled)
             possible values for header value 'error-key':
             - error.recurring_orders.disabled
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        503:
          description: Service unavailable (if Microservice is not available and/or can not be discovered)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/recurringorders/{RecurringOrderKey}:
    get:
      tags:
      - Recurring Order (Subscriptions)
      summary: Returns details about customers recurring order to the client
      description: "Returns details about business customers recurring order to the\
        \ client. Requires account administrator permissions\n\n \n The recurrence\
        \ Interval is defined as Java period Object, that supports ISO 8601. It allows\
        \ numerous possibilities to set the interval.\n The string always starts with\
        \ a 'P' for period. The interval can contain a number of years (Y), months\
        \ (M) weeks (W) or Days (D) or any combination of them.\n The number is placed\
        \ in front of the unit. Weeks are transformed to days by multiplying with\
        \ 7 -> (P4W = P28D)."
      operationId: getRecurringOrder
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringOrderRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/RecurringOrderRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        501:
          description: |-
            Not implemented (if the recurring order feature is disabled)
             possible values for header 'error-key':
             - error.recurring_orders.disabled
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        503:
          description: Service unavailable (if Microservice is not available and/or cannot be discovered)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Recurring Order (Subscriptions)
      summary: Updates a recurring order, support only activation and deactivation
      description: "Expired recurring orders cannot be set to active\n \n The recurrence\
        \ Interval is defined as Java period Object, that supports ISO 8601. It allows\
        \ numerous possibilities to set the interval.\n The string always starts with\
        \ a 'P' for period. The interval can contain a number of years (Y), months\
        \ (M) weeks (W) or Days (D) or any combination of them.\n The number is placed\
        \ in front of the unit. Weeks are transformed to days by multiplying with\
        \ 7 -> (P4W = P28D)."
      operationId: updateRecurringOrder
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecurringOrderRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateRecurringOrderRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringOrderRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/RecurringOrderRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict (if recurring order cannot be enabled)
             possible values for header value 'error-key':
             - error.recurring_orders.enable-not-possible
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        500:
          description: Internal Server Error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        501:
          description: |-
            Not implemented (if the recurring order feature is disabled)
             possible values for header value 'error-key':
             - error.recurring-orders.disabled
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        503:
          description: Service unavailable (if Microservice is not available and/or cannot be discovered)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/recurringorders/{RecurringOrderKey}/payments:
    get:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Get payments of recurring order
      description: Returns a list of all selected payments for the recurring order
      operationId: getRecurringOrderPayments
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found (basket not found)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Add payment to recurring order
      operationId: addPaymentToRecurringOrder
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: |-
            Not found
             possible values for header error-key:
             - basket.basket_not_found.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - shopping_cart.payment.paymentdata.error (e.g., wrong giftcard number)
             - shopping_cart.payment.missing_fields.error
             - shopping_cart.payment.invalid_fields.error
             - shopping_cart.payment.name.error (Payment method not found)
             - shopping_cart.payment.dublicate.error
             - shopping_cart.payment.available.error (also thrown if basket contains NO items)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    options:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Returns all payment options of recurring order
      operationId: getRecurringOrderPaymentOptions
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptionsRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaymentOptionsRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/recurringorders/{RecurringOrderKey}/payments/{RecurringOrderPaymentKey}:
    get:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Get payment details of recurring order payments
      operationId: getRecurringOrderPayment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Remove payment from recurring order
      description: Removes selected payment method from recurring order payments
      operationId: removePaymentFromRecurringOrder
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/recurringorders/{RecurringOrderKey}/payments/{RecurringOrderPaymentKey}/redirect:
    put:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Get return-URLs from REST client for payment provider redirect
      description: The REST client sends the return URLs to the system, so that the redirect URL for the payment service provider can be created. This redirect URL will be send as response to the REST client so that the client can process the redirect action. After that, the user will be redirected back to his REST client based on the return URLs.
      operationId: createRecurringOrderPaymentRedirectURL
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRedirectRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRedirectRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - Purchase (APP_B2B_PURCHASE, only in B2B applications)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Payment
      - Recurring Order (Subscriptions)
      summary: Get transaction details after redirect before checkout
      description: |-
        If the user has processed his payment transaction successfully at the payment providers system, he will be redirected back to his REST client. This return redirect contains various payment transaction attributes which must be transferred from the REST client back to the shop system to process the payment transaction. The redirect POST requests transfers this data from the REST client into the shop system so that the payment transaction can be activated there. For instance:
         - transaction ID
         - transaction status
         - and so on
      operationId: addRecurringOrderPaymentRedirectResponseData
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: RecurringOrderPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRedirectResponseRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRedirectResponseRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: |-
            FORBIDDEN
             Requires authentication with user having assigned the following permissions:
             - Purchase (APP_B2B_PURCHASE, only in B2B applications)
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/giftcardsandcertificates:
    get:
      tags:
      - Giftcard
      summary: Get the gift cards and certificates associated with the current user
      description: ResourceCollectionRO contains Objects of type LinkRO
      operationId: getGiftCardsAndCertificates
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/giftcardsandcertificates/{CustomerGiftCardAndCertificateResourceKey}:
    get:
      tags:
      - Giftcard
      summary: Get details of a gift card or certificate by given id
      operationId: getGiftCardAndCertificate
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerGiftCardAndCertificateResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardAndCertificateRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/GiftCardAndCertificateRO'
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/credentials/question:
    put:
      tags:
      - Security
      - Credentials
      summary: Update security question
      description: |-
        Updates the security question of the currently logged in customer. The key of the security question should be submitted.
         A client could get the list of possible keys from /securiry/questions resource.
      operationId: updateSecurityQuestion
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityQuestionRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/SecurityQuestionRO'
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/credentials/password:
    put:
      tags:
      - Security
      - Credentials
      summary: Update password
      description: Updates the password of the currently logged in customer with a new one.
      operationId: updatePassword
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPasswordRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/CustomerPasswordRO'
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - customer.credentials.missing_fields.error
             - customer.credentials.invalid_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/payments:
    get:
      tags:
      - Payment
      summary: Get list of customer profile payments
      description: Returns a list of all payment methods as Links that are store in the customer profile of the logged in customer.
      operationId: getPayments
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Payment
      summary: Add a payment to Customer profile
      description: Adds a payment to the customer profile of the logged in customer.
      operationId: createPayment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - shopping_cart.payment.paymentdata.error (e.g., wrong giftcard number)
             - shopping_cart.payment.missing_fields.error
             - shopping_cart.payment.invalid_fields.error
             - shopping_cart.payment.name.error (payment method not found)
             - shopping_cart.payment.dublicate.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    options:
      tags:
      - Payment
      summary: Return payment options for customer
      description: Returns all available payment methods and its parameters that can be added to the customer
      operationId: getPaymentOptions
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptionsRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaymentOptionsRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/payments/{CustomerPaymentKey}:
    get:
      tags:
      - Payment
      summary: Get details of a customer profile payment
      description: Returns detailed information of a payment method available for a customer
      operationId: getPayment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaymentRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Payment
      summary: Update payment from customer profile
      description: Updates a payment (with attributes) from customer profile for the logged in user. The request has to contain all attributes even if they are not changed. Payments without further attributes can not be updated.
      operationId: updatePayment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaymentRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaymentRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - shopping_cart.payment.paymentdata.error (e.g. wrong giftcard number)
             - shopping_cart.payment.missing_fields.error
             - shopping_cart.payment.invalid_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Payment
      summary: Remove a payment from customer profile
      description: Removes a payment method from the customer profile of the logged in customer
      operationId: deletePayment
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerPaymentKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/LinkRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/wishlists:
    get:
      tags:
      - Wishlist
      summary: Get list of wishlists of customer
      description: Returns a list of links to customer wish list resources.
      operationId: getWishlists
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    post:
      tags:
      - Wishlist
      summary: create new customer wishlist
      description: Creates a new customer wish list by using POST data provided by the client.
      operationId: createWishlist
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishListRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/WishListRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/wishlists/{CustomerWishlistKey}:
    get:
      tags:
      - Wishlist
      summary: Get customer wishlist details
      description: Retrieves and returns details about customer's wish list to the client.
      operationId: getWishlist
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishListRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/WishListRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Wishlist
      summary: Update customer wishlist
      operationId: updateWishlist
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishListRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/WishListRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishListRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/WishListRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Wishlist
      summary: Delete customer wishlist
      description: Delete a customer wish list.
      operationId: deleteWishList
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/wishlists/{CustomerWishlistKey}/{CustomerPurchaseWishlistKey}/purchase:
    post:
      tags:
      - Wishlist
      summary: Add wishlist item to basket
      description: The query parameter `quantity` is optional
      operationId: addWishlistItemToBasket
      parameters:
      - name: quantity
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerPurchaseWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - wishlist.quantity.invalid.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/wishlists/{CustomerWishlistKey}/share:
    post:
      tags:
      - Wishlist
      summary: Share wishlist of customer with given recipient
      operationId: share
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishlistSharingRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/WishlistSharingRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - account.wishlist.invalid_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Wishlist
      summary: Unshare wishlist
      description: Cancels a sharing of wishlist; removes the shared secure code and marks the wishlist as private.
      operationId: unshare
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    options:
      tags:
      - Wishlist
      summary: Returns an example request data for the sharing capabilities
      operationId: getExample
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/wishlists/{CustomerWishlistKey}/products/{productSKU}:
    post:
      tags:
      - Wishlist
      summary: Add product to specific or preferred Wishlist
      operationId: addItemToWishlist
      parameters:
      - name: productSKU
        in: path
        required: true
        schema:
          type: string
      - name: quantity
        in: query
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Wishlist
      summary: Remove product from specific or preferred wishlist
      operationId: deleteItem
      parameters:
      - name: productSKU
        in: path
        required: true
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/wishlists/settings:
    get:
      tags:
      - Wishlist
      summary: Get wisthlist settings of customer
      operationId: getWishlistSettings
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistSettingsRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/WishlistSettingsRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Wishlist
      summary: Update customer wishlist settings
      description: Updates a customer wish list settings with wish list settings data provided from the client.
      operationId: updateWishlistSettings
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishlistSettingsRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/WishlistSettingsRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: Bad request
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/notifications:
    get:
      tags:
      - Notifications
      summary: Get users product notifications
      description: Returns two links to the stock and price notifications of a user.
      operationId: getNotificationsBaseResource
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/notifications/stock:
    get:
      tags:
      - Notifications
      summary: Returns product notifications
      description: Returns users price / stock notifications
      operationId: getNotificationsBaseResourceGET
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
    post:
      tags:
      - Notifications
      summary: Create product notification
      description: |-
        Create product or stock notification.
         For product notifications, the body must contain a `price` property so the user can be notifiedwhen the price drops under that value.
         For stock notifications only the `sku` and a `notificationMailAddress` needs to be provided so the user can be notified when the product is in stock again.
      operationId: createProductNotificationPOST
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProductNotificationRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewProductNotificationRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict
             if a price or stock notification for this product already exists
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: "Not found\n possible values for header error-key:\n - account.productnotification.product.not_found.error\n\
            \ - "
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - account.productnotification.invalid_fields.error
             - account.productnotification.missing_fields.error
             - account.productnotification.product.in_stock.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/notifications/stock/{CustomerProductNotificationResourceKey}:
    get:
      tags:
      - Notifications
      summary: Get notification details
      description: Get notification details of price or stock notification
      operationId: getProductNotificationCustomerNotif
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerProductNotificationResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductNotificationRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProductNotificationRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Notifications
      summary: Update product notification
      description: |-
        Update product price or stock notification
         For product notifications, the body must contain a `price` property so the user can be notifiedwhen the price drops under that value.
         For stock notifications only the `sku` and a `notificationMailAddress` needs to be provided so the usercan be notified when the product is in stock again.
      operationId: updateProductNotificationCustomerNotif
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerProductNotificationResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductNotificationRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/ProductNotificationRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for headere error-key:
             - account.productnotification.invalid_fields.error
             - account.productnotification.missing_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Notifications
      summary: Delete product notification
      description: Delete price or stock notification
      operationId: deleteProductNotificationCustomerNotif
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerProductNotificationResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/notifications/price:
    get:
      tags:
      - Notifications
      summary: Returns product notifications
      description: Returns users price / stock notifications
      operationId: getNotificationsBaseResourceGET_1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
    post:
      tags:
      - Notifications
      summary: Create product notification
      description: |-
        Create product or stock notification.
         For product notifications, the body must contain a `price` property so the user can be notifiedwhen the price drops under that value.
         For stock notifications only the `sku` and a `notificationMailAddress` needs to be provided so the user can be notified when the product is in stock again.
      operationId: createProductNotificationPOST_1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProductNotificationRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/NewProductNotificationRO'
      responses:
        201:
          description: Created
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        409:
          description: |-
            Conflict
             if a price or stock notification for this product already exists
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: "Not found\n possible values for header error-key:\n - account.productnotification.product.not_found.error\n\
            \ - "
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for header error-key:
             - account.productnotification.invalid_fields.error
             - account.productnotification.missing_fields.error
             - account.productnotification.product.in_stock.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /customers/{CustomerKey}/notifications/price/{CustomerProductNotificationResourceKey}:
    get:
      tags:
      - Notifications
      summary: Get notification details
      description: Get notification details of price or stock notification
      operationId: getProductNotificationCustomerNotif_1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerProductNotificationResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductNotificationRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProductNotificationRO'
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    put:
      tags:
      - Notifications
      summary: Update product notification
      description: |-
        Update product price or stock notification
         For product notifications, the body must contain a `price` property so the user can be notifiedwhen the price drops under that value.
         For stock notifications only the `sku` and a `notificationMailAddress` needs to be provided so the usercan be notified when the product is in stock again.
      operationId: updateProductNotificationCustomerNotif_1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerProductNotificationResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductNotificationRO'
          text/xml:
            schema:
              $ref: '#/components/schemas/ProductNotificationRO'
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        400:
          description: |-
            Bad request
             possible values for headere error-key:
             - account.productnotification.invalid_fields.error
             - account.productnotification.missing_fields.error
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
    delete:
      tags:
      - Notifications
      summary: Delete product notification
      description: Delete price or stock notification
      operationId: deleteProductNotificationCustomerNotif_1
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: CustomerKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      - name: CustomerProductNotificationResourceKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        204:
          description: No content
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        401:
          description: Unauthorized
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        403:
          description: FORBIDDEN
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
        404:
          description: Not found
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
  /wishlists:
    get:
      tags:
      - Wishlist
      summary: Public wishlists
      description: Returns a list of links to public wish lists created by the private customers or users of a business customers.Optionally, the results could be narrowed down with search parameters - first name, last name and e-mail.200 status code is returned when there's at least one public wish list.If no wishlists were found, an empty ResourceCollection will be returned.
      operationId: getPublicWishlists
      parameters:
      - name: firstname
        in: query
        description: The first name of the wishlist owner
        schema:
          type: string
      - name: lastname
        in: query
        description: The last name of the wishlist owner
        schema:
          type: string
      - name: email
        in: query
        description: The email of the wishlist owner
        schema:
          type: string
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/ResourceCollectionRO'
  /wishlists/{PublicWishlistKey}:
    get:
      tags:
      - Wishlist
      summary: Get public wishlist details
      description: Returns details, in resource object, about a public wish list created by private customer or user of a business customer.
      operationId: getPublicWishlist
      parameters:
      - name: authentication-token
        in: header
        description: A token to authenticate the request
        allowEmptyValue: true
        schema:
          type: string
      - name: UserLogin
        in: header
        description: User name
        allowEmptyValue: true
        schema:
          type: string
      - name: UserPassword
        in: header
        description: User password
        allowEmptyValue: true
        schema:
          type: string
      - name: UserOrganization
        in: header
        description: User organization
        allowEmptyValue: true
        schema:
          type: string
      - name: PublicWishlistKey
        in: path
        description: The key or UUID to resolve a single item
        required: true
        schema:
          type: string
        example: ExampleKey
      responses:
        200:
          description: |-
            OK
              is returned when the wish list and its owner are existing and the wish list belongs to the owner
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishListRO'
            text/xml:
              schema:
                $ref: '#/components/schemas/WishListRO'
        404:
          description: |-
            Not found
             when either of the required IDs are wrong or invalid.
          headers:
            authentication-token:
              schema:
                type: string
              example: A token to authenticate further requests
components:
  schemas:
    SubscriptionRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of the returned element
          example: Subscription
          xml:
            attribute: true
        active:
          type: boolean
          description: a boolean value indicating if the subscription is active
        recipient:
          type: string
          description: the recipient of the newsletter
          example: d.weiers@test.intershop.de
      xml:
        name: Subscription
    AttributeRO_v1:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute. Must be set during creation of the attribute and cannot be changed afterwards.
        type:
          type: string
          description: The type of the attribute. Must be set during creation of the attribute and cannot be changed afterwards.
          enum:
          - Boolean
          - Date
          - Decimal
          - Double
          - Integer
          - Long
          - Money
          - Quantity
          - String
          - Text
          - MultipleBoolean
          - MultipleDate
          - MultipleDecimal
          - MultipleDouble
          - MultipleInteger
          - MultipleLong
          - MultipleString
        value:
          type: object
      description: A representation of an attribute.
      discriminator:
        propertyName: type
        mapping:
          Boolean: '#/components/schemas/BooleanAttributeRO_v1'
          Date: '#/components/schemas/DateAttributeRO_v1'
          Decimal: '#/components/schemas/DecimalAttributeRO_v1'
          Double: '#/components/schemas/DoubleAttributeRO_v1'
          Integer: '#/components/schemas/IntegerAttributeRO_v1'
          Long: '#/components/schemas/LongAttributeRO_v1'
          Money: '#/components/schemas/MoneyAttributeRO_v1'
          Quantity: '#/components/schemas/QuantityAttributeRO_v1'
          String: '#/components/schemas/StringAttributeRO_v1'
          Text: '#/components/schemas/TextAttributeRO_v1'
          MultipleBoolean: '#/components/schemas/MultipleBooleanAttributeRO_v1'
          MultipleDate: '#/components/schemas/MultipleDateAttributeRO_v1'
          MultipleDecimal: '#/components/schemas/MultipleDecimalAttributeRO_v1'
          MultipleDouble: '#/components/schemas/MultipleDoubleAttributeRO_v1'
          MultipleInteger: '#/components/schemas/MultipleIntegerAttributeRO_v1'
          MultipleLong: '#/components/schemas/MultipleLongAttributeRO_v1'
          MultipleString: '#/components/schemas/MultipleStringAttributeRO_v1'
      oneOf:
      - $ref: '#/components/schemas/BooleanAttributeRO_v1'
      - $ref: '#/components/schemas/DateAttributeRO_v1'
      - $ref: '#/components/schemas/DecimalAttributeRO_v1'
      - $ref: '#/components/schemas/DoubleAttributeRO_v1'
      - $ref: '#/components/schemas/IntegerAttributeRO_v1'
      - $ref: '#/components/schemas/LongAttributeRO_v1'
      - $ref: '#/components/schemas/MoneyAttributeRO_v1'
      - $ref: '#/components/schemas/QuantityAttributeRO_v1'
      - $ref: '#/components/schemas/StringAttributeRO_v1'
      - $ref: '#/components/schemas/TextAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleBooleanAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleDateAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleDecimalAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleDoubleAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleIntegerAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleLongAttributeRO_v1'
      - $ref: '#/components/schemas/MultipleStringAttributeRO_v1'
    BasketCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BasketRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketDiscountsRO_v1:
      type: object
      properties:
        dynamicMessages:
          type: array
          description: The dynamic messages for a basket.
          readOnly: true
          items:
            type: string
            description: The dynamic messages for a basket.
            readOnly: true
        shippingBasedDiscounts:
          type: array
          description: The IDs of all discounts granted on shipping and handling costs.
          readOnly: true
          items:
            type: string
            description: The IDs of all discounts granted on shipping and handling costs.
            readOnly: true
        valueBasedDiscounts:
          type: array
          description: The IDs of all discounts granted on the basket total.
          readOnly: true
          items:
            type: string
            description: The IDs of all discounts granted on the basket total.
            readOnly: true
      description: Provides details about the applied discounts.
      readOnly: true
    BasketRO_v1:
      type: object
      properties:
        affiliatePartner:
          type: string
          description: The affiliate partner id of the basket.
          example: 4bcKAB2Ykg4AAAFbjvEYRPJ7
        affiliateProgram:
          type: string
          description: The affiliate program id of the basket.
          example: uzMKAB2YvKAAAAFb7DUYRPJ8
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        buckets:
          type: array
          description: The bucket ids of all shipping buckets of a basket.
          items:
            type: string
            description: The bucket ids of all shipping buckets of a basket.
        calculated:
          type: boolean
          description: The calculation state of the basket. By default the basket will always be calculated after an update. By settings this to 'false', the basket will not be calculated. Note that the calculation results of a previous calculation will still be present in this case.
        commonShipToAddress:
          type: string
          description: The common ship-to address URN of the basket.
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        commonShippingMethod:
          type: string
          description: The common shipping method id of the basket.
          example: STD_5DAY
        costCenter:
          type: string
          description: The cost center id of the basket.
          example: "511288"
        customer:
          type: string
          description: The basket owner customer number.
          readOnly: true
        department:
          type: string
          description: The department name of the basket.
          example: SALES
        discounts:
          $ref: '#/components/schemas/BasketDiscountsRO_v1'
        documentNumber:
          type: string
          description: The document number of a basket. It is currently only set if basket is in status waiting for approval after submitting.
          readOnly: true
        externalOrderReference:
          type: string
          description: The external order reference id of the basket.
          example: "30000008899"
        id:
          type: string
          description: The ID of the basket.
          example: q2QKAEsBiyQAAAFjXFBB6G14
        invoiceToAddress:
          type: string
          description: The invoice-to address URN of the basket.
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        lineItems:
          type: array
          description: The ids of all line items of a basket.
          items:
            type: string
            description: The ids of all line items of a basket.
        messageToMerchant:
          type: string
          description: Something what the buyer would like to tell the merchant.
          example: Is it possible to send the ordered articles before Christmas?
        payments:
          type: array
          description: The payments used to pay the basket.
          items:
            type: string
            description: The payments used to pay the basket.
        promotionCodes:
          type: array
          description: The promotion codes of the basket.
          items:
            type: string
            description: The promotion codes of the basket.
        purchaseCurrency:
          type: string
          description: The purchase currency of the basket.
          readOnly: true
          example: USD
        recurrence:
          $ref: '#/components/schemas/BasketRecurrenceRO_v1'
        recurringOrderDocumentNo:
          type: string
          description: The recurring order number.
          readOnly: true
        surcharges:
          $ref: '#/components/schemas/BasketSurchargesRO_v1'
        taxIdentificationNumber:
          type: string
          description: The tax identification number of the buyer/company.
          example: "11111111"
        totalProductQuantity:
          type: number
          description: The sum of all quantities of products in the basket.
          readOnly: true
          example: 23
        totals:
          $ref: '#/components/schemas/BasketTotalsRO_v1'
        user:
          type: string
          description: The basket owner user login.
          readOnly: true
      description: A representation of a basket
    BasketRecurrenceRO_v1:
      required:
      - endDate
      - interval
      - repetitions
      - startDate
      type: object
      properties:
        endDate:
          type: string
          description: The end date of a recurrence.
          format: date-time
        executeMissedOrders:
          type: boolean
          description: The execute missed orders flag.
          example: false
        interval:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The interval of a recurrence.
          example: P6Y11M27D
        repetitions:
          type: integer
          description: The repetitions of a recurrence.
          format: int32
          example: 24
        startDate:
          type: string
          description: The start date of a recurrence.
          format: date-time
      description: Recurrence data which are associated with a basket.
    BasketSurchargeRO_v1:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PriceRO_v1'
        name:
          type: string
          description: The surcharge's localized name.
          readOnly: true
          example: Fridge Box
        description:
          type: string
          description: The surcharge's localized description.
          readOnly: true
          example: Needs a fridge box for shipping.
        taxes:
          type: array
          description: The taxes applied to the surcharge.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
      description: Describes a single surcharge incurred to a shipping bucket.
      readOnly: true
    BasketSurchargesRO_v1:
      type: object
      properties:
        bucketSurcharges:
          type: array
          description: All bucket based extra charges arising from surcharges with action type 'bucket'.
          readOnly: true
          items:
            $ref: '#/components/schemas/BasketSurchargeRO_v1'
        itemSurcharges:
          type: array
          description: All item based extra charges arising from surcharges directly specified on product or by shipping rules with action type 'item'.
          readOnly: true
          items:
            $ref: '#/components/schemas/BasketSurchargeRO_v1'
      description: Surcharges that are applied to a basket.
      readOnly: true
    BasketTotalsRO_v1:
      type: object
      properties:
        grandTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        paymentCostsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedItemTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedShippingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        basketShippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        basketValueDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        bucketShippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        discountTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        giftingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        itemShippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        itemTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        itemValueDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        salesTaxTotalsByTaxRate:
          type: array
          description: All sales taxes applied to the basket, accumulated by their tax rates.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
        shippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingTaxTotalsByTaxRate:
          type: array
          description: All shipping taxes applied to the basket, accumulated by their tax rates.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
        shippingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        surchargeTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        taxTotalsByTaxRate:
          type: array
          description: All taxes applied to the basket, accumulated by their tax rates (includes taxes levied to sales, prices, shipping and surcharges.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
        valueDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
      description: Total price values for a basket.
      readOnly: true
    BooleanAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: boolean
          description: The boolean attribute value.
      description: A representation of a boolean attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    DateAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: The date/time attribute value.
          format: date-time
      description: A representation of a date/time attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    DecimalAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: number
          description: The decimal attribute value.
      description: A representation of a decimal attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    DoubleAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: number
          description: The double attribute value.
          format: double
      description: A representation of a double attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    FeedbackCauseRO_v1:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: An unique identifier for this particular occurrence of the problem (may be used for localization on client-side).
          example: invoiceToAddress.address.postalcode.invalid
        message:
          type: string
          description: A human readable message in request's locale (server falls back to lead locale if requested local is not supported).
          example: The specified postal code is invalid. Valid values are numbers 10000 to 99999.
        parameters:
          type: object
          additionalProperties:
            type: string
            description: A map of several parameters that are used to assemble the message.
          description: A map of several parameters that are used to assemble the message.
        paths:
          type: array
          description: A collection of JSON paths to the associated entities. If not otherwise specified, this always refers to the request entity.
          externalDocs:
            url: https://github.com/json-path/JsonPath
          items:
            type: string
            description: A collection of JSON paths to the associated entities. If not otherwise specified, this always refers to the request entity.
            externalDocs:
              url: https://github.com/json-path/JsonPath
      description: A representation for the common feedback informations.
    FeedbackRO_v1:
      type: object
      properties:
        causes:
          type: array
          description: A collection of errors/infos that caused this feedback.
          items:
            $ref: '#/components/schemas/FeedbackCauseRO_v1'
        code:
          type: string
          description: An unique identifier for this particular occurrence of the problem (may be used for localization on client-side).
          example: invoiceToAddress.address.postalcode.invalid
        message:
          type: string
          description: A human readable message in request's locale (server falls back to lead locale if requested local is not supported).
          example: The specified postal code is invalid. Valid values are numbers 10000 to 99999.
        parameters:
          type: object
          additionalProperties:
            type: string
            description: A map of several parameters that are used to assemble the message.
          description: A map of several parameters that are used to assemble the message.
        paths:
          type: array
          description: A collection of JSON paths to the associated entities. If not otherwise specified, this always refers to the request entity.
          externalDocs:
            url: https://github.com/json-path/JsonPath
          items:
            type: string
            description: A collection of JSON paths to the associated entities. If not otherwise specified, this always refers to the request entity.
            externalDocs:
              url: https://github.com/json-path/JsonPath
        status:
          type: string
          description: The HTTP status code, that is applicable to this problem.
          example: "400"
      description: An error or information representation regarding the current request.
      readOnly: true
    IntegerAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: integer
          description: The integer attribute value.
          format: int32
      description: A representation of an integer attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    JurisdictionRO_v1:
      type: object
      properties:
        id:
          type: string
          description: The jurisdiction ID.
          example: CANADA
        level:
          type: string
          description: The level of the jurisdiction for which the tax is applied.
          example: COUNTRY
          enum:
          - APO
          - BOROUGH
          - CITY
          - COUNTRY
          - COUNTY
          - DISTRICT
          - FPO
          - LOCAL_IMPROVEMENT_DISTRICT
          - PARISH
          - PROVINCE
          - SPECIAL_PURPOSE_DISTRICT
          - STATE
          - TERRITORY
          - TOWNSHIP
          - TRADE_BLOCK
          - TRANSIT_DISTRICT
      description: Describes the jurisdiction, an area subject to its own distinct tax regulations,such as a municipality, city, county, or country.
      readOnly: true
    LongAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: integer
          description: The long attribute value.
          format: int64
      description: A representation of a long attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MoneyAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/MoneyRO_v1'
      description: A representation of a money attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MoneyRO_v1:
      type: object
      properties:
        currency:
          type: string
          description: Three-letter currency code (ISO 4217) of the monetary value.
          readOnly: true
          example: USD
        value:
          type: number
          description: The monetary value.
          readOnly: true
          example: 10.99
      description: Describes a money object.
      readOnly: true
    MultipleBooleanAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple boolean attribute value.
          items:
            type: boolean
            description: The multiple boolean attribute value.
      description: A representation of a multiple boolean attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MultipleDateAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple date/time attribute value.
          items:
            type: string
            description: The multiple date/time attribute value.
            format: date-time
      description: A representation of a multiple date/time attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MultipleDecimalAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple decimal attribute value.
          items:
            type: number
            description: The multiple decimal attribute value.
      description: A representation of a multiple decimal attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MultipleDoubleAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple double attribute value.
          items:
            type: number
            description: The multiple double attribute value.
            format: double
      description: A representation of a multiple double attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MultipleIntegerAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple integer attribute value.
          items:
            type: integer
            description: The multiple integer attribute value.
            format: int32
      description: A representation of a multiple integer attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MultipleLongAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple long attribute value.
          items:
            type: integer
            description: The multiple long attribute value.
            format: int64
      description: A representation of a multiple long attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    MultipleStringAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: array
          description: The multiple string attribute value.
          items:
            type: string
            description: The multiple string attribute value.
      description: A representation of a multiple string attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    PriceRO_v1:
      type: object
      properties:
        gross:
          $ref: '#/components/schemas/MoneyRO_v1'
        net:
          $ref: '#/components/schemas/MoneyRO_v1'
        tax:
          $ref: '#/components/schemas/MoneyRO_v1'
      description: Describes a price. A price has a monetary net, gross and tax value.
      readOnly: true
    QuantityAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/QuantityRO_v1'
      description: A representation of a quantity attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    QuantityRO_v1:
      required:
      - value
      type: object
      properties:
        unit:
          type: string
          description: The quantity's unit code.
          example: kg
        value:
          type: number
          description: The quantity's value.
          example: 10
      description: A quantity of a business entity.
    StringAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: The string attribute value.
      description: A representation of a string attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    TaxItemRO_v1:
      required:
      - calculatedTax
      - effectiveTaxRate
      type: object
      properties:
        calculatedTax:
          $ref: '#/components/schemas/MoneyRO_v1'
        effectiveTaxRate:
          type: number
          description: The effective rate used to calculate the tax.
        jurisdiction:
          $ref: '#/components/schemas/JurisdictionRO_v1'
        nonTaxableAmount:
          $ref: '#/components/schemas/MoneyRO_v1'
        situs:
          type: string
          description: The situs/place of taxation.
          readOnly: true
          example: DESTINATION
          enum:
          - NULL
          - ADMINISTRATIVE_DESTINATION
          - ADMINISTRATIVE_ORIGIN
          - DESTINATION
          - ORIGIN
        taxableAmount:
          $ref: '#/components/schemas/MoneyRO_v1'
      description: Represents a single tax item.
      readOnly: true
    TextAttributeRO_v1:
      required:
      - name
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: The text attribute value.
      description: A representation of a text attribute.
      allOf:
      - $ref: '#/components/schemas/AttributeRO_v1'
    BasketListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/BasketRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    AddressListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/AddressRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    AddressRO_v1:
      type: object
      properties:
        addressLine1:
          type: string
          description: The first address line, that usual contains street and house number.
          example: Berliner Str. 20
        addressLine2:
          type: string
          description: The second address line.
        addressLine3:
          type: string
          description: The third address line.
        aristocraticTitle:
          type: string
          description: The aristocratic title of the contact person, like 'Lord' or 'Lady'.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        city:
          type: string
          description: The name of the city.
          example: Potsdam
        companyName1:
          type: string
          description: The company name in case it is a business address.
          example: Intershop Communications AG
        companyName2:
          type: string
          description: The second company name
        country:
          type: string
          description: The localized display name of the country
          readOnly: true
          example: Germany
        countryCode:
          type: string
          description: The ISO 3166-1 country code
          example: DE
        eligibleInstallToAddress:
          type: boolean
          description: Flag indicating that the address can be used as install-to address.
          example: false
        eligibleInvoiceToAddress:
          type: boolean
          description: Flag indicating that the address can be used as invoice-to address.
          example: true
        eligibleServiceToAddress:
          type: boolean
          description: Flag indicating that the address can be used as service-to address.
          example: false
        eligibleShipFromAddress:
          type: boolean
          description: Flag indicating that the address can be used as ship-from address.
          example: false
        eligibleShipToAddress:
          type: boolean
          description: Flag indicating that the address can be used as ship-to address.
          example: true
        email:
          type: string
          description: The e-mail address of the contact person.
          example: patricia@test.intershop.de
        fax:
          type: string
          description: The fax number.
        firstName:
          type: string
          description: The given name (also known as a personal name, first name, forename, or Christian name) of the contact person
          example: Patricia
        honorific:
          type: string
          description: The honorific title of the contact person that denotes the honored person's occupation, like 'Captain', 'Reverend' or the academic title, like 'PhD'.
        id:
          type: string
          description: The ID that identifies the address.
          example: "0987654321"
        jobTitle:
          type: string
          description: The job title of the contact person.
        lastName:
          type: string
          description: The last name (also known as a family name, surname, or gentile name) of the contact person.
          example: Miller
        mainDivision:
          type: string
          description: The localized display name of the main division
          readOnly: true
          example: Alabama
        mainDivisionCode:
          type: string
          description: The main division code of the country, e. g. a state or province.
          example: Al
        phoneBusiness:
          type: string
          description: The phone number of the contact person's company.
        phoneBusinessDirect:
          type: string
          description: |-
            The business phone number of the contact person that allows an outside caller to connect directly to the
             contact person without any help of an attendant or operator.
        phoneHome:
          type: string
          description: The phone number of the house or apartment where the contact person lives.
          example: "049364112677"
        phoneMobile:
          type: string
          description: The number of the contact person's cell phone.
        postBox:
          type: string
          description: The post-office box.
        postalCode:
          type: string
          description: The postal code of the city.
          example: "14482"
        secondLastName:
          type: string
          description: The second last name of the contact person.
        secondName:
          type: string
          description: The second given name of the contact person.
        subDivision:
          type: string
          description: The localized display name of the sub division.
          readOnly: true
          example: City of Westminster
        subDivisionCode:
          type: string
          description: The sub division code.
          example: "020"
        title:
          type: string
          description: The (personal) title of the contact person.
          example: Ms.
        urn:
          type: string
          description: The URN representation of this address.
          example: urn:address:customer:1234567890:0987654321
        usage:
          type: object
          properties:
            empty:
              type: boolean
          description: 'The usage information for the address. Every bit in the returned
            set marks a specific usage type: [invoice-to, ship-to, ship-from, service-to,
            install-to]. If a bit is set, the address may be used for the specific
            purpose mapped to this bit. By default, all values are set to true.'
      description: The address
    FeedbackCtnrRO_v1:
      type: object
      properties:
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    AddressCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AddressRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    ContainerRO_v1:
      type: object
      properties:
        data:
          type: object
          description: The core data of the response object.
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    AbstractResourceObject:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
      description: the list of elements
    ResourceCollectionRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AbstractResourceObject'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      description: A list of ResourceObjects
      xml:
        name: ResourceCollection
    LinkRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        uri:
          type: string
          description: the uri of the returned element
        relation:
          type: string
          description: the relation of the returned element
          enum:
          - about
          - alternate
          - appendix
          - archives
          - author
          - bookmark
          - canonical
          - chapter
          - collection
          - contents
          - copyright
          - create-form
          - current
          - describedby
          - describes
          - disclosure
          - duplicate
          - edit
          - edit-form
          - edit-media
          - enclosure
          - first
          - glossary
          - help
          - hosts
          - hub
          - icon
          - index
          - item
          - last
          - latest-version
          - license
          - lrdd
          - monitor
          - monitor-group
          - next
          - next-archive
          - nofollow
          - noreferrer
          - payment
          - predecessor-version
          - prefetch
          - prev
          - preview
          - previous
          - prev-archive
          - privacy-policy
          - profile
          - related
          - replies
          - search
          - section
          - self
          - service
          - start
          - stylesheet
          - subsection
          - successor-version
          - tag
          - terms-of-service
          - type
          - up
          - version-history
          - via
          - working-copy
          - working-copy-of
        title:
          type: string
          description: the title of the returned element
        description:
          type: string
          description: The description of the returned element
        itemId:
          type: string
          description: the Id of the linked item
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: A Link pointing to a Resource Object
      xml:
        name: Link
    ResourceAttribute:
      type: object
      properties:
        name:
          type: string
          description: the attribute's name
          xml:
            attribute: true
        type:
          type: string
          description: the attribute's type
          xml:
            attribute: true
        value:
          type: object
          description: the attribute's value
      xml:
        name: ResourceAttribute
    ResourceCollectionROLinkRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      description: A list of ResourceObjects
      xml:
        name: ResourceCollection
    CostObjectAssignmentRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the costobject
          example: "451"
        type:
          type: string
          description: the type of the costobject
          example: Project
      xml:
        name: CostObjectAssignment
    BasketShippingBucketListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/BasketShippingBucketRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketShippingBucketRO_v1:
      type: object
      properties:
        basket:
          type: string
          description: The basket this shipping bucket belongs to.
          readOnly: true
          example: yUQKAEsBeeoAAAFl9vhJwIZc
        calculated:
          type: boolean
          description: The calculation state of the shipping bucket. By default the shipping bucket will always be calculated after an update. By settings this to 'false', the shipping bucket will not be calculated. Note that the calculation results of a previous calculation will still be present in this case. Also note that by setting this to 'true', not only the shipping bucket, but the whole basket is calculated.
        deliveryTimeMax:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The maximum time the delivery will take based on the chosen shipping method (in ISO-8601 period format).
          readOnly: true
          example: P7D
        deliveryTimeMin:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The minimum time the delivery will take based on the chosen shipping method (in ISO-8601 period format).
          readOnly: true
          example: P3D
        discounts:
          type: array
          description: The IDs of the discounts applied to the bucket totals.
          readOnly: true
          items:
            type: string
            description: The IDs of the discounts applied to the bucket totals.
            readOnly: true
        id:
          type: string
          description: The ID of the bucket.
          readOnly: true
          example: "54489489212"
        lineItems:
          type: array
          description: The ids of all line items which are associated with this bucket.
          readOnly: true
          items:
            type: string
            description: The ids of all line items which are associated with this bucket.
            readOnly: true
        shipToAddress:
          type: string
          description: The ship-to address URN for this bucket.
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        shippingCosts:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingMethod:
          type: string
          description: The shipping method id for this bucket.
          example: STD_5DAY
        surcharges:
          type: array
          description: All extra charges arising from surcharges directly specified on product or by shipping rules with action type 'bucket'.
          readOnly: true
          items:
            $ref: '#/components/schemas/BasketSurchargeRO_v1'
      description: Describes a shipping bucket.
    BasketShippingBucketCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BasketShippingBucketRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketShippingMethodListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/BasketShippingMethodRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketShippingMethodRO_v1:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        deliveryTimeMax:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The maximum time the delivery will take when selecting this shipping method (in ISO-8601 period format). Note that because the delivery time depends on the shipping bucket, it will only be returned if request from the bucket.
          readOnly: true
          example: P7D
        deliveryTimeMin:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The minimum time the delivery will take when selecting this shipping method (in ISO-8601 period format). Note that because the delivery time depends on the shipping bucket, it will only be returned if request from the bucket.
          readOnly: true
          example: P3D
        description:
          type: string
          description: The shipping method's localized description.
          readOnly: true
          example: Delivered to you 3-7 business days after we process your order.
        digitalDelivery:
          type: boolean
          description: Whether this shipping method is a digital delivery method (e. g. for e-mail delivery).
          readOnly: true
        id:
          type: string
          description: The shipping method's unique identifier.
          readOnly: true
          example: STD_GROUND
        name:
          type: string
          description: The shipping method's localized display name.
          readOnly: true
          example: Standard Ground
        shippingCosts:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingInstructionsSupported:
          type: boolean
          description: Whether special shipping instructions can be added to the shipping bucket when selecting this shipping method.
          readOnly: true
        shortName:
          type: string
          description: The shipping method's localized short Name.
          readOnly: true
          example: Int'l Express Delivery.
      description: Describes a shipping method that can be selected as delivery option.
    ParameterRO_v1:
      type: object
      properties:
        name:
          type: string
          description: The name of the parameter.
          example: expiryDate
        value:
          type: object
          description: The value of the parameter.
          example: 12/20
      description: A representation of a parameter value.
    PaymentCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PaymentRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    PaymentRO_v1:
      required:
      - paymentInstrument
      type: object
      properties:
        baseAmount:
          $ref: '#/components/schemas/MoneyRO_v1'
        id:
          type: string
          description: The ID of the payment.
          readOnly: true
          example: AAFjXFq2QKAEsBiyQABB6G14
        openTender:
          type: boolean
          description: Whether or not the payment is an 'open-tender' payment.
          readOnly: true
        paymentCosts:
          $ref: '#/components/schemas/PriceRO_v1'
        paymentInstrument:
          type: string
          description: The reference to the payment instrument that was selected for this payment.
          example: c2UKAEsBar8AAAFmxYVBTOiI
        paymentMethod:
          type: string
          description: The reference to the payment method that was used for this payment.
          readOnly: true
          example: ISH_INVOICE
        redirect:
          $ref: '#/components/schemas/PaymentRedirectRO_v1'
        redirectRequired:
          type: boolean
          description: Whether or not a redirect is required to finish the payment. The type of redirect (before or after the checkout process) can be determined via the capabilities of the payment method.
          readOnly: true
        status:
          type: string
          description: The localized display name of the payment status.
          readOnly: true
          example: Partially captured
        totalAmount:
          $ref: '#/components/schemas/MoneyRO_v1'
      description: A payment assigned to the basket/order to pay the bill with.
    PaymentRedirectRO_v1:
      required:
      - cancelUrl
      - failureUrl
      - successUrl
      type: object
      properties:
        cancelUrl:
          type: string
          description: The URL to be called when the user cancelled payment and the PSP redirects the user back to the shop. Placeholders can be used in this URL that get replaced by their real values during order creation. Per default the placeholders \*orderID\* and \*paymentID\* are available.
          format: uri
          example: https://shop.server/cancel?paymentID=*paymentID*
        failureUrl:
          type: string
          description: The URL to be called when the payment failed and the PSP redirects the user back to the shop. Placeholders can be used in this URL that get replaced by their real values during order creation. Per default the placeholders \*orderID\* and \*paymentID\* are available.
          format: uri
          example: https://shop.server/failure
        parameters:
          type: array
          description: List of parameters returned in the redirect response from the PSP.
          items:
            $ref: '#/components/schemas/ParameterRO_v1'
        redirectUrl:
          type: string
          description: The URL to be called when redirecting the user to the payment providers page.
          format: uri
          readOnly: true
          example: https://psp-server/pay
        status:
          type: string
          description: The final status of the redirect returned to the shop.
          example: SUCCESS
          enum:
          - SUCCESS
          - CANCEL
          - FAILURE
        successUrl:
          type: string
          description: The URL to be called on successful payment redirect back to the shop. Placeholders can be used in this URL that get replaced by their real values during order creation. Per default the placeholders \*orderID\* and \*paymentID\* are available.
          format: uri
          example: https://shop.server/success?orderID=*orderID*
      description: 'Describes a payment redirect. Note: Beta version - This class
        can still be subject of change!'
    PaymentRedirectRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        successURL:
          type: string
        failURL:
          type: string
        cancelURL:
          type: string
      xml:
        name: PaymentRedirect
    GenericPropertyROObject:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        key:
          type: string
        property:
          type: object
        displayName:
          type: string
      xml:
        name: Property
    MoneyRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        value:
          type: number
        currencyMnemonic:
          type: string
        currency:
          type: string
      description: the products price as MoneyRO
      xml:
        name: Money
    PaymentRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Payment
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        id:
          type: string
        limitedTenderBalance:
          $ref: '#/components/schemas/MoneyRO'
        paymentTotalAmount:
          $ref: '#/components/schemas/MoneyRO'
        parameters:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/GenericPropertyROObject'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: Payment
    PaymentRedirectResponseRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        id:
          type: string
        parameters:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/GenericPropertyROObject'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: PaymentRedirectResponse
    PaymentInstrumentCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PaymentInstrumentRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    PaymentInstrumentRO_v1:
      required:
      - paymentMethod
      type: object
      properties:
        accountIdentifier:
          type: string
          description: An optional identifier for the customers bank account.
          readOnly: true
          example: DE12****7890
        id:
          type: string
          description: The ID of the payment instrument.
          example: AAFjXFq2QKAEsBiyQABB6G14
        parameters:
          type: array
          description: The parameters for the payment instrument.
          items:
            $ref: '#/components/schemas/ParameterRO_v1'
        paymentMethod:
          type: string
          description: The reference to the payment method the instrument is created for.
          example: ISH_DIRECT_DEBIT
      description: A payment instrument with stored bank account data.
    BasketPromotionCodeRO_v1:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: The promotion code string.
          readOnly: true
          example: JSTTWVJNSIIUW
      description: Describes the applied promotion code.
    BasketValidationCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BasketValidationRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketValidationRO_v1:
      type: object
      properties:
        adjustmentsAllowed:
          type: boolean
          description: Defines whether adjustments of the basket are allowed during the validation. For example, if this is set to 'true', then a product that is no longer available will be removed during the validation; if this is set to 'false' instead, then only an error will be returned.
          default: false
        basket:
          type: string
          description: The ID of the basket that is validated.
          readOnly: true
          example: MAoKAEsBSYIAAAFrkghefNsj
        errorBehavior:
          type: string
          description: Defines whether the validation immediately stops if an error occurs. If this is set to 'StopOnError', then the validation only continues until the first error. If this is set to 'StopOnErrorFinishScope', then the validation will finish the scope where the first error occurs and stop afterwards. If this is set to 'NeverStop', then it will continue to the end and return all validation errors at once.
          enum:
          - StopOnError
          - StopOnErrorFinishScope
          - NeverStop
          default: NeverStop
        results:
          $ref: '#/components/schemas/BasketValidationResultRO_v1'
        scopes:
          type: array
          description: The list of scopes that are validated. If not specified, the basket will be validated for all scopes. Note that the list of allowable values only contains the standard scopes; if there are custom validation handlers with different scopes, those can be used too.
          items:
            type: string
            description: The list of scopes that are validated. If not specified, the basket will be validated for all scopes. Note that the list of allowable values only contains the standard scopes; if there are custom validation handlers with different scopes, those can be used too.
            enum:
            - All
            - CostCenter
            - InvoiceAddress
            - Order
            - Payment
            - Products
            - Promotion
            - Quote
            - Shipping
            - ShippingAddress
            - Subscription
            - Value
            default: All
          enum:
          - All
          - CostCenter
          - InvoiceAddress
          - Order
          - Payment
          - Products
          - Promotion
          - Quote
          - Shipping
          - ShippingAddress
          - Subscription
          - Value
          default: All
      description: A representation of a basket validation operation. Contains parameters for triggering the validation as well as the validation results for the given scopes.
    BasketValidationResultRO_v1:
      type: object
      properties:
        adjusted:
          type: boolean
          description: Returns whether the basket has been adjusted during the validation.
          readOnly: true
        errors:
          type: array
          description: List of errors that occurred while validating the basket for the given scope(s). The paths of the feedback messages refer to the basket that has been validated (with related objects being embedded).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        infos:
          type: array
          description: List of adjustments that were made while validating the basket for the given scope(s). The paths of the feedback messages refer to the basket that has been validated (with related objects being embedded).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        valid:
          type: boolean
          description: Returns whether the basket is valid. A basket is valid if no errors occurred during the validation.
          readOnly: true
      description: A representation of the results of a basket validation operation.
      readOnly: true
    BasketLineItemListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/BasketLineItemRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketLineItemPricingRO_v1:
      type: object
      properties:
        giftingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        price:
          $ref: '#/components/schemas/PriceRO_v1'
        salesTaxTotal:
          $ref: '#/components/schemas/MoneyRO_v1'
        shippingRebatesTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingTaxTotal:
          $ref: '#/components/schemas/MoneyRO_v1'
        singleBasePrice:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedPrice:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedShippingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedSingleBasePrice:
          $ref: '#/components/schemas/PriceRO_v1'
        valueRebatesTotal:
          $ref: '#/components/schemas/PriceRO_v1'
      description: total price values of a line item that has been added to a basket
      readOnly: true
    BasketLineItemRO_v1:
      required:
      - product
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        basket:
          type: string
          description: The basket this line item belongs to.
          readOnly: true
          example: yUQKAEsBeeoAAAFl9vhJwIZc
        calculated:
          type: boolean
          description: The calculation state of the line item. By default the line item will always be calculated after an update. By settings this to 'false', the line item will not be calculated. Note that the calculation results of a previous calculation will still be present in this case. Also note that by setting this to 'true', not only the line item, but the whole basket is calculated.
        desiredDelivery:
          type: string
          description: The desired delivery date for the Item.
          format: date
        discounts:
          type: array
          description: The IDs of the discounts applied to the item pricing.
          readOnly: true
          items:
            type: string
            description: The IDs of the discounts applied to the item pricing.
            readOnly: true
        freeGift:
          type: boolean
          description: Flag indicating that this product line item is a free gift and  has been automatically placed in the line item container.
          readOnly: true
          example: false
        giftMessage:
          type: string
          description: Additional gift message for this the line item.
          readOnly: true
        giftWrap:
          type: string
          description: Additional gift wrapping for this the line item.
          readOnly: true
        hiddenGift:
          type: boolean
          description: Flag indicating that this product line item is a free gift, that will not be displayed in line item container.
          readOnly: true
          example: false
        id:
          type: string
          description: The line item's unique identifier.
          readOnly: true
        position:
          type: integer
          description: The position of the item in the basket.
          format: int32
        pricing:
          $ref: '#/components/schemas/BasketLineItemPricingRO_v1'
        product:
          type: string
          description: The product represented as stock keeping unit (SKU).
          example: "5079747"
        quantity:
          $ref: '#/components/schemas/QuantityRO_v1'
        quote:
          type: string
          description: The quote this item was created from.
          example: Qu0T3MgoyuMAx9Es2sx0Ue1
        shipToAddress:
          type: string
          description: The ship-to address URN for this bucket.
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        shippingMethod:
          type: string
          description: The shipping method id for this bucket.
          example: STD_5DAY
        surcharges:
          type: array
          description: Details about additional surcharges applied to the item.
          readOnly: true
          items:
            $ref: '#/components/schemas/BasketSurchargeRO_v1'
        thumbnail:
          type: string
          description: The thumbnail uri of the Product.
          readOnly: true
          example: /INTERSHOP/static/WFS/inSPIRED-inTRONICS-Site/-/inSPIRED/en_US/M/3957288-5427.jpg
        warranty:
          type: string
          description: A warranty assigned to the line item.
          readOnly: true
      description: Describes a line item that has been added to a basket.
    BasketLineItemCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BasketLineItemRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketMergeCtnrRO.v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BasketMergeRO.v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    BasketMergeRO.v1:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        removeSourceBasket:
          type: boolean
          description: 'The flag decides if the source basket retains. (default: The
            source basket will removed.)'
          example: true
        sourceAuthenticationToken:
          type: string
          description: The authentication token to access the source basket.
        sourceBasket:
          type: string
          description: The id of the basket whose information are merged into the other basket.
          example: 1XQKABsm5boAAAFrzZFR4EbI
        targetBasket:
          type: string
          description: The id of the basket where the line items are merged into.
          readOnly: true
          example: yiwKABsmStEAAAFrd.FhzEc5
      description: A representation of merge basket information
    ConstraintRO_v1:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: The message text of the constraint.
          readOnly: true
      description: A constraint of a parameter.
    OptionRO_v1:
      type: object
      properties:
        displayName:
          type: string
          description: The localized display name of the parameter option.
          example: American Express
        id:
          type: string
          description: The id of the parameter option.
          example: amx
      description: A representation of a parameter option.
    ParameterDefinitionRO_v1:
      required:
      - name
      - type
      type: object
      properties:
        constraints:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConstraintRO_v1'
          description: A map of parameter constraints. The key is the constraint type.
        description:
          type: string
          description: The localized parameter description.
          readOnly: true
        displayName:
          type: string
          description: The localized display name of the parameter.
          readOnly: true
          example: Expiration Date
        hidden:
          type: boolean
          description: Flag indicating a hidden parameter that is not visible in the UI.
          readOnly: true
        name:
          type: string
          description: The name of the parameter.
          readOnly: true
          example: expiryDate
        options:
          type: array
          description: A list of allowable values to choose from for this parameter.
          items:
            $ref: '#/components/schemas/OptionRO_v1'
        placeholder:
          type: string
          description: A placeholder string for the parameter.
          readOnly: true
        type:
          type: string
          description: The type of the parameter.
          readOnly: true
          example: String
      description: A representation of a parameter definition.
      readOnly: true
    PaymentMethodListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/PaymentMethodRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    PaymentMethodRO_v1:
      type: object
      properties:
        capabilities:
          type: array
          description: List of supported payment service capabilities.
          readOnly: true
          example: RedirectAfterCheckout
          items:
            type: string
            description: List of supported payment service capabilities.
            readOnly: true
            example: RedirectAfterCheckout
        description:
          type: string
          description: A more detailed description of the payment method.
          readOnly: true
          example: Simulate a payment with the Intershop demo method
        displayName:
          type: string
          description: The display name of the payment method.
          readOnly: true
          example: ISH Demo Payment
        hostedPaymentPageParameters:
          type: array
          description: List of content parameters for Hosted Payment Pages.
          readOnly: true
          items:
            $ref: '#/components/schemas/ParameterRO_v1'
        id:
          type: string
          description: The ID of the payment method. Internally this is the ID of the payment method configuration in the backoffice.
          readOnly: true
          example: ISH_INVOICE
        maxOrderAmount:
          $ref: '#/components/schemas/PriceRO_v1'
        minOrderAmount:
          $ref: '#/components/schemas/PriceRO_v1'
        parameterDefinitions:
          type: array
          description: List of parameters (e.g. credit card 3DS token or IBAN) for this payment.
          readOnly: true
          items:
            $ref: '#/components/schemas/ParameterDefinitionRO_v1'
        paymentCosts:
          $ref: '#/components/schemas/PriceRO_v1'
        paymentCostsThreshold:
          $ref: '#/components/schemas/PriceRO_v1'
        paymentInstruments:
          type: array
          description: The IDs of all payment instruments stored for this payment method in the current context.
          readOnly: true
          items:
            type: string
            description: The IDs of all payment instruments stored for this payment method in the current context.
            readOnly: true
        restricted:
          type: boolean
          description: Whether the payment method can be used in the current context.
          readOnly: true
        restrictions:
          type: array
          description: The restrictions which prevent the payment method from being applicable.
          readOnly: true
          items:
            $ref: '#/components/schemas/PaymentRestrictionRO_v1'
        saveAllowed:
          type: boolean
          description: Whether the entered payment data can be saved for later reuse.
          readOnly: true
          example: false
        serviceID:
          type: string
          description: The ID of the payment service.
          readOnly: true
          example: SomePaymentProvider_CreditCard
      description: A configured payment method.
    PaymentRestrictionRO_v1:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: A unique identifier for this restriction.
          readOnly: true
          example: payment.restriction.MultipleBuckets
        message:
          type: string
          description: A human readable message in request's locale describing the restriction.
          readOnly: true
          example: Not available for orders being dispatched to multiple addresses or in multiple shipments.
      description: A restriction which limits the use of a payment method.
      readOnly: true
    StoreRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the store
          example: Factory Outlet B5
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: StoreLocation
          xml:
            attribute: true
        address2:
          type: string
        address3:
          type: string
        postalCode:
          type: string
          description: the postal code of the stores location
          example: "14641"
        city:
          type: string
          description: the city the store is located in
          example: Wustermark
        country:
          type: string
        countryCode:
          type: string
          description: the country code of the store
          example: DE
        email:
          type: string
          description: the email address of the store
          example: b5@test.intershop.de
        fax:
          type: string
          description: the fax number of the store
          example: +49 (0) 33 234 - 90 420
        phoneBusiness:
          type: string
          description: the business phone number of the store
          example: +49 (0) 33 234 - 90 40
        phoneBusinessDirect:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        firstLastName:
          type: string
        uuid:
          type: string
          description: the uuid of the store
          example: rPMKABsm2RsAAAFOI8ss9GK2
        address:
          type: string
          description: the address of the store
          example: Alter Spandauer Weg 1
      description: the list of elements
      xml:
        name: StoreLocation
    StoreROResourceCollection:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/StoreRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      xml:
        name: Stores
    CallParameterDefinitionRO:
      type: object
      properties:
        name:
          type: string
          description: The name of the parameter.
        description:
          type: string
          description: A description of the parameter.
        optional:
          type: boolean
          description: true, if the parameter is optional.
      description: A call parameter used to define particular view context objects.
    ConfigurationParameterRO:
      type: object
      properties:
        value:
          type: object
          description: the (localized) value of the returned ConfigurationParameter
        type:
          type: string
          description: the type of the returned ConfigurationParameter
        definitionQualifiedName:
          type: string
          description: the definition qualified name of the returned ConfigurationParameter
      description: the map of ConfigurationParameterROs with their names as keys
    ViewContextRO:
      required:
      - definitionQualifiedName
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        definitionQualifiedName:
          type: string
          description: the definition qualified name of the returned element
        link:
          $ref: '#/components/schemas/LinkRO'
        displayName:
          type: string
          description: The display name of the view context.
        id:
          type: string
          description: The unique internal id.
        resolveLink:
          $ref: '#/components/schemas/LinkRO'
        callParameters:
          type: array
          description: The parameters that have to be used to denote the objects this context belongs to.
          items:
            $ref: '#/components/schemas/CallParameterDefinitionRO'
        page:
          type: boolean
          description: The page flag indicates whether the view contexts ContextObjectRelation points to a page or an include.
        systemManaged:
          type: boolean
          description: The system managed flag indicates whether the view contexts are instantiated by the system or created by the user.
        configurationParameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConfigurationParameterRO'
          description: the map of ConfigurationParameterROs with their names as keys
        customAttributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceAttribute'
          description: the map of custom attributes with their names as keys
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: A representation of a view context
    Adaptable:
      type: object
      description: the collection of PageletROs (or links to them) assigned to this slot
    PageletEntryPointRO:
      required:
      - definitionQualifiedName
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        definitionQualifiedName:
          type: string
          description: the definition qualified name of the returned element
        link:
          $ref: '#/components/schemas/LinkRO'
        pagelets:
          type: array
          description: the collection of pagelets refered by the requested PageletEntryPoint
          items:
            $ref: '#/components/schemas/Adaptable'
        displayName:
          type: string
          description: the (localized) display name of the returned element
        id:
          type: string
        domain:
          type: string
        resourceSetID:
          type: string
        configurationParameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConfigurationParameterRO'
          description: the map of ConfigurationParameterROs with their names as keys
        customAttributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceAttribute'
          description: the map of custom attributes with their names as keys
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
    PageletRO:
      required:
      - definitionQualifiedName
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        definitionQualifiedName:
          type: string
          description: the definition qualified name of the returned element
        link:
          $ref: '#/components/schemas/LinkRO'
        displayName:
          type: string
        slots:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Adaptable'
          description: the map of SlotROs (or links to them) defined by the Pagelet, with their names as keys
        id:
          type: string
        domain:
          type: string
        configurationParameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConfigurationParameterRO'
          description: the map of ConfigurationParameterROs with their names as keys
        customAttributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceAttribute'
          description: the map of custom attributes with their names as keys
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
    SlotRO:
      required:
      - definitionQualifiedName
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        definitionQualifiedName:
          type: string
          description: the definition qualified name of the returned element
        link:
          $ref: '#/components/schemas/LinkRO'
        displayName:
          type: string
        pagelets:
          type: array
          description: the collection of PageletROs (or links to them) assigned to this slot
          items:
            $ref: '#/components/schemas/Adaptable'
        configurationParameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConfigurationParameterRO'
          description: the map of ConfigurationParameterROs with their names as keys
        customAttributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceAttribute'
          description: the map of custom attributes with their names as keys
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
    FacetRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        count:
          type: integer
          format: int32
        link:
          $ref: '#/components/schemas/LinkRO'
        level:
          type: integer
          format: int32
        hits:
          $ref: '#/components/schemas/LinkRO'
        selected:
          type: boolean
      description: Facets
      example: Object of type FacetRO
      xml:
        name: Facet
    FilterMappingRO:
      type: object
      properties:
        type:
          type: string
          enum:
          - image
          - text
          - hexcode
          - colorcode
        mapping:
          type: string
      description: FilterValueMap
      example: Map that contains maping information for facets
    ResourceCollectionROSearchIndexFilterRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SearchIndexFilterRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      description: A list of ResourceObjects
      xml:
        name: ResourceCollection
    SearchIndexFilterRO:
      type: object
      properties:
        name:
          type: string
          description: Name of filter
          example: Taxonomic Filter
          xml:
            attribute: true
        type:
          type: string
          description: Type of object
          example: SearchIndexFilter
          xml:
            attribute: true
        id:
          type: string
          description: ID of filter
          example: CategoryUUIDLevelMulti
        facets:
          type: array
          description: Facets
          example: Object of type FacetRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/FacetRO'
        displayType:
          type: string
          description: Display type
          example: text_clear
        selectionType:
          type: string
          description: Selection type
          example: taxonomic
        limitCount:
          type: integer
          description: Limit count
          format: int32
          example: -1
        minCount:
          type: integer
          description: Minimum count
          format: int32
          example: 1
        filterValueMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FilterMappingRO'
          description: FilterValueMap
          example: Map that contains maping information for facets
        scope:
          type: string
          description: Scope of filter
          example: Global
      description: Represents a filter
      xml:
        name: SearchIndexFilter
    GeoObjectListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/GeoObjectRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    GeoObjectRO_v1:
      type: object
      properties:
        id:
          type: string
          description: The id of the geoobject.
          readOnly: true
          example: US
        name:
          type: string
          description: The full qualified name of the geoobject.
          readOnly: true
          example: United States
      description: Describes a geoobject which can be a country or maindivision/state.
    GeoObjectCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GeoObjectRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects.
          description: Optionally included related data objects.
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    AttachmentRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        key:
          type: string
        value:
          type: string
        description:
          type: string
        uri:
          type: boolean
      xml:
        name: Attachment
    AttributeGroupRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        attributeGroups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeGroupRO'
          description: the map of AttributeGroupROs defined by the goup, with their ids as keys
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
    CategoryPathRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        id:
          type: string
        uri:
          type: string
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: CategoryPath
    DefaultCategoryRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        id:
          type: string
        categoryPath:
          type: array
          items:
            $ref: '#/components/schemas/CategoryPathRO'
        uri:
          type: string
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: DefaultCategory
    ImageRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Image
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        effectiveUrl:
          type: string
          description: the effective URL of the image
          example: /INTERSHOP/static/WFS/PrimeTech-PrimeTechSpecials-Site/b2c-web-shop/PrimeTech/en_US/1XL/350617-1238.jpg
        viewID:
          type: string
          description: the view id of the image
          example: front
        typeID:
          type: string
          description: the type id of the image
          example: 1XL
        actualHeight:
          type: integer
          format: int32
        actualWidth:
          type: integer
          format: int32
        imageActualHeight:
          type: integer
          description: the actual height of the image
          format: int32
          example: 220
        imageActualWidth:
          type: integer
          description: the actual width of the image
          format: int32
          example: 220
        primaryImage:
          type: boolean
          description: indicates if this image is the primary image
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: the images of this (sub)-category
      xml:
        name: Image
    ProductPriceRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        locale:
          type: object
          properties:
            language:
              type: string
            script:
              type: string
            country:
              type: string
            variant:
              type: string
            extensionKeys:
              uniqueItems: true
              type: array
              items:
                type: string
            unicodeLocaleAttributes:
              uniqueItems: true
              type: array
              items:
                type: string
            unicodeLocaleKeys:
              uniqueItems: true
              type: array
              items:
                type: string
            iso3Language:
              type: string
            iso3Country:
              type: string
            displayLanguage:
              type: string
            displayScript:
              type: string
            displayCountry:
              type: string
            displayVariant:
              type: string
            displayName:
              type: string
          writeOnly: true
        value:
          type: number
        currencyMnemonic:
          type: string
        priceText:
          type: string
        currency:
          type: string
      xml:
        name: ProductPrice
    ProductRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        sku:
          type: string
        productName:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        productTypes:
          type: array
          items:
            type: string
        availability:
          type: boolean
        retailSet:
          type: boolean
        inStock:
          type: boolean
        availableStock:
          type: number
        productMaster:
          type: boolean
        productMasterSKU:
          type: string
        mastered:
          type: boolean
        roundedAverageRating:
          type: string
        averageRating:
          type: string
        readyForShipmentMin:
          type: integer
          format: int32
        readyForShipmentMax:
          type: integer
          format: int32
        minOrderQuantity:
          type: number
        productBundle:
          type: boolean
        manufacturer:
          type: string
        listPrice:
          $ref: '#/components/schemas/ProductPriceRO'
        salePrice:
          $ref: '#/components/schemas/ProductPriceRO'
        minListPrice:
          $ref: '#/components/schemas/ProductPriceRO'
        maxListPrice:
          $ref: '#/components/schemas/ProductPriceRO'
        minSalePrice:
          $ref: '#/components/schemas/ProductPriceRO'
        maxSalePrice:
          $ref: '#/components/schemas/ProductPriceRO'
        summedUpListPrice:
          $ref: '#/components/schemas/ProductPriceRO'
        summedUpSalePrice:
          $ref: '#/components/schemas/ProductPriceRO'
        endOfLife:
          type: integer
          format: int64
        lastOrderDate:
          type: integer
          format: int64
        maxOrderQuantity:
          type: number
        stepOrderQuantity:
          type: number
        packingUnit:
          type: string
        price:
          type: string
        currencyCode:
          type: string
        variations:
          type: string
        crosssells:
          type: string
        bundles:
          type: string
        partOfRetailSet:
          type: string
        reviews:
          type: string
        shippingMethods:
          uniqueItems: true
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ShippingMethodRO'
        availableWarranties:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        availableGiftWraps:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        availableGiftMessages:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        images:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ImageRO'
        defaultCategory:
          $ref: '#/components/schemas/DefaultCategoryRO'
        attributeGroups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeGroupRO'
        attachments:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AttachmentRO'
        additionalAttributes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        variationAttributeValues:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariationAttributeRO'
        variableVariationAttributes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariationAttributeRO'
        timeToDelivery:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ProductShippingMethodDeliveryRO'
        promotions:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        seoAttributes:
          $ref: '#/components/schemas/SEOMetaAttributes'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: Product
    ProductShippingMethodDeliveryRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        timeToDeliveryMin:
          type: integer
          format: int32
        timeToDeliveryMax:
          type: integer
          format: int32
        shippingMethodId:
          type: string
        shippingMethodName:
          type: string
      xml:
        name: ProductShippingMethodDelivery
    SEOMetaAttributes:
      type: object
      properties:
        metaTitle:
          type: string
        metaDescription:
          type: string
        metaKeywords:
          type: array
          items:
            type: string
        robots:
          type: array
          items:
            type: string
      xml:
        name: SEOAttributes
    ShippingMethodRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: ShippingMethod
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        id:
          type: string
          description: the id of the returned element
          example: STD_GROUND
        shippingTimeMin:
          type: integer
          description: The minimum shipping time in days
          format: int32
          example: 3
        shippingTimeMax:
          type: integer
          description: The maximum shipping time in days
          format: int32
          example: 7
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: the shipping method of the line item as ShippingMethodRO
      xml:
        name: ShippingMethod
    VariationAttributeRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        value:
          type: string
        variationAttributeId:
          type: string
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: VariationAttribute
    ReviewRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of the content
          example: Review
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        authorFirstName:
          type: string
          description: The first name of the author
          example: Alexandra
        authorLastName:
          type: string
          description: The last name of the author
          example: Heimroth
        title:
          type: string
          description: The title of the review
          example: Good choice
        content:
          type: string
          description: The content of the review
          example: I am satisfied with my purchase.The quality is very good for the price. Still I wish there were more features.
        id:
          type: string
          description: The id of the review
          example: y60KDACwgR8AAAFB0MKGQOQj
        creationDate:
          type: string
          description: The creation date of the review
          example: Wed Oct 23 10:07:30 EEST 2013
        rating:
          type: integer
          description: The rating of the product from 0 to 5
          format: int32
          example: 5
        status:
          type: string
          description: The status of the review
          example: NEW (NOT APPROVED)
        showAuthorNameFlag:
          type: boolean
          description: If rendered and true the reviewer can decide to show the name
          example: true
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: Review
    ProductSearchAttributesRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        masterProductSKU:
          type: string
        prioritySearchAttribute:
          type: string
        searchAttributes:
          type: object
          additionalProperties:
            type: string
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: ProductSearchAttributes
    VariationCollectionRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariationLinkRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      xml:
        name: Variations
    VariationLinkRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        uri:
          type: string
          description: the uri of the returned element
        relation:
          type: string
          description: the relation of the returned element
          enum:
          - about
          - alternate
          - appendix
          - archives
          - author
          - bookmark
          - canonical
          - chapter
          - collection
          - contents
          - copyright
          - create-form
          - current
          - describedby
          - describes
          - disclosure
          - duplicate
          - edit
          - edit-form
          - edit-media
          - enclosure
          - first
          - glossary
          - help
          - hosts
          - hub
          - icon
          - index
          - item
          - last
          - latest-version
          - license
          - lrdd
          - monitor
          - monitor-group
          - next
          - next-archive
          - nofollow
          - noreferrer
          - payment
          - predecessor-version
          - prefetch
          - prev
          - preview
          - previous
          - prev-archive
          - privacy-policy
          - profile
          - related
          - replies
          - search
          - section
          - self
          - service
          - start
          - stylesheet
          - subsection
          - successor-version
          - tag
          - terms-of-service
          - type
          - up
          - version-history
          - via
          - working-copy
          - working-copy-of
        title:
          type: string
          description: the title of the returned element
        description:
          type: string
          description: The description of the returned element
        itemId:
          type: string
          description: the Id of the linked item
        variableVariationAttributeValues:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariationAttributeRO'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: the list of elements
      xml:
        name: VariationLink
    ResourceCollectionROTypedLinkRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TypedLinkRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      description: A list of ResourceObjects
      xml:
        name: ResourceCollection
    TypedLinkRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        linkType:
          type: string
        categoryLinks:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        productLinks:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
      description: the list of elements
      xml:
        name: TypedLink
    PersonalizationRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Personalization
          xml:
            attribute: true
        pgid:
          type: string
          description: the personalization group identifier (pgid) of the personalization object
          example: HLgg8Yus9qBSR0rCuy4DMI9n0000ys
      xml:
        name: Personalization
    PasswordReminderRO:
      required:
      - email
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        email:
          type: string
          description: 'the email to send the reminder to '
          example: goosen@test.intershop.de
        firstName:
          type: string
          description: the first name of the recipient. Required in case Security question feature is enabled.
          example: Gerhardt
        lastName:
          type: string
          description: the last name of the recipient. Required in case Security question feature is enabled.
          example: Goosen
        answer:
          type: string
          description: the answer to the security question. Required in case Security question feature is enabled.
          example: Snoopy
      xml:
        name: PasswordReminder
    SecurityQuestionRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: SecurityQuestion
          xml:
            attribute: true
        text:
          type: string
          description: the text of the security question
          example: What is your pet's name?
        key:
          type: string
          description: the key of the security question
          example: account.security_question.pet_name.text
      xml:
        name: SecurityQuestion
    SecurityQuestionsCollectionRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SecurityQuestionRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      xml:
        name: SecurityQuestions
    PasswordResetRO:
      required:
      - password
      - secureCode
      - userID
      type: object
      properties:
        userID:
          type: string
          description: The unique ID of the user which password will be set. Provided in the Password Reminder e-mail message.
          example: mt4KAEsByeIAAAFtwuREkERx
        secureCode:
          type: string
          description: Unique security code used for verification. Provided in the Password Reminder e-mail message.
          example: bfd51c73-0e2a-46e1-a3e4-b977a001ae9a
        password:
          type: string
          description: The new password to be set for the related user.
          example: mynewpassword2019
      description: Holder for the data necessary to reset password of registered user.
      xml:
        name: PasswordReset
    PromotionRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of the object
          example: Promotion
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        icon:
          type: string
          description: The icon of the promotion
          example: free shipping!
        currency:
          type: string
          description: The currency which the promotion is applicable to
          example: USD
        promotionID:
          type: string
          description: The promotion ID
        id:
          type: string
          description: The promotion ID
        description:
          type: string
          description: The promotion description
          example: For LED TVs the shipping is free.
        promotionType:
          type: string
          description: The type of the promotion
          example: ShippingPercentageOffDiscount
        longTitle:
          type: string
          description: The long title of the promotion
          example: Free shipping on orders with an LED TV.
        legalContentMessage:
          type: string
          description: The legal content message
          example: Offer valid only while supplies last and not applicable to canceled orders due to out-of-stock merchandise. Discount not applicable with returned merchandise; total discount will be deducted from the value of any returned item to which the discount applied. This offer is not valid on previous purchases. This promotional offer may be modified or terminated at any time without notice. We reserve the right to cancel any order due to unauthorized, altered, or ineligible use of a discount.
        ruleDescription:
          type: string
          description: The rule for the promotion to apply
          example: Buy any LED TV and the order ships free.
        title:
          type: string
          description: The short title of the promotion
          example: free shipping!
        couponCodeRequired:
          type: boolean
          description: true if a coupon code is required for this promotion
          example: false
        externalUrl:
          type: string
          description: External url.
          readOnly: true
          example: http://www.abc.de
        useExternalUrl:
          type: boolean
          description: Use external url.
          readOnly: true
          example: true
        disableMessages:
          type: boolean
          description: Disable messages.
          readOnly: true
          example: true
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: Promotion
    ContactRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the person contacting
          example: Patricia Miller
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Contact
          xml:
            attribute: true
        email:
          type: string
          description: the email of the person contacting
          example: patricia@test.intershop.de
        phone:
          type: string
          description: the phone number of the person contacting
          example: "12345"
        order:
          type: string
          description: the order number this contact refers to
          example: "54321"
        subject:
          type: string
          description: the subject of the contact
          example: Order Inquiries
        comment:
          type: string
          description: the comment of the contact
          example: Where can I find the status of my order?
      xml:
        name: Contact
    ContactUsROResourceCollection:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ContactRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      xml:
        name: Subjects
    RecommendationEventRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
      xml:
        name: RecommendationEvent
      discriminator:
        propertyName: type
    OrderDescriptionRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: OrderDescription
          xml:
            attribute: true
        paymentInformations:
          $ref: '#/components/schemas/OrderPaymentInformationsRO'
        basketID:
          type: string
          description: the id of the corresponding basket
          example: u.0KDgAjIYsAAAFjIQxW6PNc
        acceptTermsAndConditions:
          type: boolean
          description: did the customer accept the terms and conditions
      xml:
        name: OrderDescription
    OrderPaymentInformationsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned object
          example: OrderPaymentInformations
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        id:
          type: string
        parameters:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/GenericPropertyROObject'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: The payment information for this order as OrderPaymentInformationsRO
    OrderCreationRO_v1:
      type: object
      properties:
        redirect:
          $ref: '#/components/schemas/PaymentRedirectRO_v1'
        status:
          type: string
          description: Represents the status of the order creation process. If this returns "COMPLETED", then the order creation is finished. If this returns "ROLLED_BACK", then the order creation was unsuccessful (e. g. because of a failed or cancelled payment) and the order is rolled back and becomes inaccessible. If this returns "STOPPED", then the client needs to perform the action from the "stopAction" field first. Once done, the order creation can be continued by setting this to "CONTINUE". Passing other values than "CONTINUE" will result in an error.
          enum:
          - COMPLETED
          - STOPPED
          - ROLLED_BACK
          - CONTINUE
          default: CONTINUE
        stopAction:
          $ref: '#/components/schemas/StopActionRO_v1'
      description: A resource object containing data about an ongoing order creation process. Includes information about the status of the order creation and whether additional actions need to be performed before the order creation is finished (e. g. redirects to payment providers).
    OrderCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrderRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    OrderDiscountsRO_v1:
      type: object
      properties:
        dynamicMessages:
          type: array
          description: The dynamic messages for a order.
          readOnly: true
          items:
            type: string
            description: The dynamic messages for a order.
            readOnly: true
        shippingBasedDiscounts:
          type: array
          description: The IDs of all discounts granted on shipping and handling costs.
          readOnly: true
          items:
            type: string
            description: The IDs of all discounts granted on shipping and handling costs.
            readOnly: true
        valueBasedDiscounts:
          type: array
          description: The IDs of all discounts granted on the order total.
          readOnly: true
          items:
            type: string
            description: The IDs of all discounts granted on the order total.
            readOnly: true
      description: Provides details about the applied discounts.
      readOnly: true
    OrderRO_v1:
      required:
      - basket
      - termsAndConditionsAccepted
      type: object
      properties:
        affiliatePartner:
          type: string
          description: The affiliate partner id of the order.
          readOnly: true
          example: 4bcKAB2Ykg4AAAFbjvEYRPJ7
        affiliateProgram:
          type: string
          description: The affiliate program id of the order.
          readOnly: true
          example: uzMKAB2YvKAAAAFb7DUYRPJ8
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        basket:
          type: string
          description: The basket (ID) which this order is created from.
          example: b45KeTsBizQBBBFjXFAA6S15
        buckets:
          type: array
          description: The bucket ids of all shipping buckets of an order.
          readOnly: true
          items:
            type: string
            description: The bucket ids of all shipping buckets of an order.
            readOnly: true
        commonShipToAddress:
          type: string
          description: The common ship-to address URN of the order.
          readOnly: true
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        commonShippingMethod:
          type: string
          description: The common shipping method id of the order.
          readOnly: true
          example: STD_5DAY
        costCenter:
          type: string
          description: The cost center id of the order.
          readOnly: true
          example: "511288"
        creationDate:
          type: string
          description: The creation date of the order.
          format: date-time
          readOnly: true
        customer:
          type: string
          description: The order owner customer number.
          readOnly: true
        department:
          type: string
          description: The department name of the order.
          readOnly: true
          example: SALES
        discounts:
          $ref: '#/components/schemas/OrderDiscountsRO_v1'
        documentNumber:
          type: string
          description: The document number of the order.
          readOnly: true
        externalOrderReference:
          type: string
          description: The external order reference id of the order.
          readOnly: true
          example: "30000008899"
        id:
          type: string
          description: The ID of the order.
          readOnly: true
          example: q2QKAEsBiyQAAAFjXFBB6G14
        invoiceToAddress:
          type: string
          description: The invoice-to address URN of the order.
          readOnly: true
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        lineItems:
          type: array
          description: The IDs of all line items of an order.
          readOnly: true
          items:
            type: string
            description: The IDs of all line items of an order.
            readOnly: true
        messageToMerchant:
          type: string
          description: Something what the buyer would like to tell the merchant.
          readOnly: true
          example: Is it possible to send the ordered articles before Christmas?
        orderCreation:
          $ref: '#/components/schemas/OrderCreationRO_v1'
        payments:
          type: array
          description: The payments used to pay the order.
          readOnly: true
          items:
            type: string
            description: The payments used to pay the order.
            readOnly: true
        promotionCodes:
          type: array
          description: The promotion codes of the order.
          readOnly: true
          items:
            type: string
            description: The promotion codes of the order.
            readOnly: true
        purchaseCurrency:
          type: string
          description: The purchase currency of the order.
          readOnly: true
          example: USD
        recurringOrderDocumentNo:
          type: string
          description: The recurring order number.
          readOnly: true
        status:
          type: string
          description: The localized display name of the order status.
          readOnly: true
          example: in progress
        statusCode:
          type: string
          description: The status code of the order.
          readOnly: true
          example: INPROGRESS
        surcharges:
          $ref: '#/components/schemas/OrderSurchargesRO_v1'
        taxIdentificationNumber:
          type: string
          description: The tax identification number of the buyer/company.
          readOnly: true
          example: "11111111"
        termsAndConditionsAccepted:
          type: boolean
          description: Flag for specifying whether the terms and conditions have been accepted. A value of 'false' will cause the order creation to fail.
        totalProductQuantity:
          type: number
          description: The sum of all quantities of products in the order.
          readOnly: true
          example: 23
        totals:
          $ref: '#/components/schemas/OrderTotalsRO_v1'
        user:
          type: string
          description: The order owner user login.
          readOnly: true
      description: A representation of an order
    OrderSurchargeRO_v1:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PriceRO_v1'
        name:
          type: string
          description: The surcharge's localized name.
          readOnly: true
          example: Fridge Box
        description:
          type: string
          description: The surcharge's localized description.
          readOnly: true
          example: Needs a fridge box for shipping.
        taxes:
          type: array
          description: The taxes applied to the surcharge.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
      description: Describes a single surcharge incurred to a shipping bucket.
      readOnly: true
    OrderSurchargesRO_v1:
      type: object
      properties:
        bucketSurcharges:
          type: array
          description: All bucket based extra charges arising from surcharges with action type 'bucket'.
          readOnly: true
          items:
            $ref: '#/components/schemas/OrderSurchargeRO_v1'
        itemSurcharges:
          type: array
          description: All item based extra charges arising from surcharges directly specified on product or by shipping rules with action type 'item'.
          readOnly: true
          items:
            $ref: '#/components/schemas/OrderSurchargeRO_v1'
      description: Surcharges that are applied to an order.
      readOnly: true
    OrderTotalsRO_v1:
      type: object
      properties:
        grandTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        paymentCostsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedItemTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedShippingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        bucketShippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        discountTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        giftingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        itemShippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        itemTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        itemValueDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        orderShippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        orderValueDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        salesTaxTotalsByTaxRate:
          type: array
          description: All sales taxes applied to the order, accumulated by their tax rates.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
        shippingDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingTaxTotalsByTaxRate:
          type: array
          description: All shipping taxes applied to the order, accumulated by their tax rates.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
        shippingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        surchargeTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        taxTotalsByTaxRate:
          type: array
          description: All taxes applied to the order, accumulated by their tax rates (includes taxes levied to sales, prices, shipping and surcharges.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxItemRO_v1'
        valueDiscountsTotal:
          $ref: '#/components/schemas/PriceRO_v1'
      description: Total price values for an order.
      readOnly: true
    StopActionRO_v1:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of stop action.
          readOnly: true
      description: A representation of a stop action. A stop action is an action that needs to be performed before a certain process (e. g. creation of an order) can be continued.
      readOnly: true
      discriminator:
        propertyName: type
        mapping:
          Redirect: '#/components/schemas/StopActionRedirectRO_v1'
          Workflow: '#/components/schemas/StopActionWorkflowRO_v1'
      oneOf:
      - $ref: '#/components/schemas/StopActionRedirectRO_v1'
      - $ref: '#/components/schemas/StopActionWorkflowRO_v1'
    StopActionRedirectRO_v1:
      required:
      - redirectUrl
      - type
      type: object
      properties:
        redirectUrl:
          type: string
          description: The redirect URL that needs to be visited before the stopped process can be continued.
          format: uri
          readOnly: true
      description: A redirect stop action. Contains an URL (e. g. to a payment service provider) that needs to be visited before the stopped process can be continued.
      allOf:
      - $ref: '#/components/schemas/StopActionRO_v1'
    StopActionWorkflowRO_v1:
      required:
      - exitReason
      - type
      type: object
      properties:
        exitReason:
          type: string
          description: The reason stating why the process was stopped and which workflow needs to be triggered before the stopped process can continue.
          readOnly: true
          example: approval_workflow
      description: A workflow stop action. This indicates that an external workflow (e. g. order approval) needs to be triggered before the stopped process can continue.
      allOf:
      - $ref: '#/components/schemas/StopActionRO_v1'
    OrderListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/OrderRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    AddressRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of the returned element
          example: Address
          xml:
            attribute: true
        urn:
          type: string
          description: the URN representation of this address
          example: urn:address:customer:1234567890:0987654321
        id:
          type: string
          description: The id of the returned element
          example: vagKAB17gg4AAAFGSkFqQASI
        addressName:
          type: string
          description: The name of the address
          example: customeraddr-ABCDEFGPRMuMCscyXgSRVU
        title:
          type: string
          description: ' the (personal) title of the contact person, like <i>Mr.</i>
            or <i>Ms.</i>'
          example: Mrs.
        aristocraticTitle:
          type: string
          description: the aristocratic title of the contact person, like <i>Lord</i> or <i>Lady</i>
        jobTitle:
          type: string
          description: the job title of the contact person
          example: CEO
        honorific:
          type: string
          description: the honorific title of the contact person that denotes the honored person's occupation, like <i>Captain</i>, <i>Coach</i>, <i>Officer</i>, <i>Reverend</i> or the academic title, like <i>PhD</i>
        firstName:
          type: string
          description: the (first) given name of the contact person
          example: Patricia
        secondName:
          type: string
          description: the second given name of the contact person
          example: Luise
        lastName:
          type: string
          description: the last name of the contact person
          example: Miller
        secondLastName:
          type: string
          description: the second last name of the contact person
        companyName1:
          type: string
          description: the company name
          example: PMiller ltd.
        companyName2:
          type: string
          description: the second company name
        addressLine1:
          type: string
          description: the first address line
          example: Berliner Str. 20
        addressLine2:
          type: string
          description: the second address line
          example: 1st Floor
        addressLine3:
          type: string
          description: The third address line
          example: Second door on the right
        postBox:
          type: string
          description: the post-office box
          example: PO Box 42
        mainDivision:
          type: string
          description: the main division of the country, e. g. a state or province
          example: AL
        mainDivisionName:
          type: string
          description: The localized display name of the main division
          example: Alabama
        subDivision:
          type: string
          description: The sub division code of the country.
          example: GB-PKN
        subDivisionName:
          type: string
          description: The localized display name of the sub division
          example: Perth and Kinross
        postalCode:
          type: string
          description: the postal code
          example: "14482"
        email:
          type: string
          description: the e-mail address of the contact person
          example: pmiller@intershop.de
        phoneMobile:
          type: string
          description: the number of the contact person's cell phone
          example: +49364112677
        phoneHome:
          type: string
          description: the phone number of the house or apartment where the contact person lives
          example: "049364112677"
        phoneBusiness:
          type: string
          description: the phone number of the contact person's company
          example: "049364112699"
        phoneBusinessDirect:
          type: string
          description: the business phone number of the contact person that allows an outside caller to connect directly to the contact person without any help of an attendant or operator
          example: "049364112659"
        country:
          type: string
          description: the display name of the country in the current locale
          example: Germany
        countryCode:
          type: string
          description: ISO 3166-1 country code
          example: DE
        city:
          type: string
          description: the city
          example: Potsdam
        fax:
          type: string
          description: the fax number
          example: "049364112643"
        usage:
          type: object
          properties:
            empty:
              type: boolean
          description: ' Returns usage information for the address. Every bit in the
            returned set marks a specific usage type, like ship-from or invoice-to
            address. If a bit is set, the address may be used for the specific purpose
            mapped to this bit. Further bits may be used for custom types. Default
            usage for first 4 bits are Invoice-to, Ship-to, Service-to and Install-to'
      description: the shipping addres of the line item as AddressRO
      xml:
        name: Address
    AppliedRebateRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: AppliedRebate
          xml:
            attribute: true
        amount:
          $ref: '#/components/schemas/MoneyRO'
        code:
          type: string
          description: the code of the applied rebate
          example: INTERSHOP
        description:
          type: string
          description: The description of the applied rebate
          example: For orders over 200 USD, a 10 USD Order discount is guaranteed for the Promo Code 'INTERSHOP'.
        rebateType:
          type: string
          description: the type of the applied rebate
          example: OrderValueOffDiscount
      description: the shipping rebates as Collection of AppliedRebateRO
      xml:
        name: AppliedRebate
    AppliedTaxRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: AppliedTax
          xml:
            attribute: true
        amount:
          $ref: '#/components/schemas/MoneyRO'
        rate:
          type: number
          description: the tax rate, 100 = 100%
          example: 19
      description: the taxes applied to the surcharge amount as collection of AppliedTaxRO
      xml:
        name: AppliedTax
    OrderLineItemRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: OrderLineItem
          xml:
            attribute: true
        shipToAddress:
          $ref: '#/components/schemas/AddressRO'
        shippingMethod:
          $ref: '#/components/schemas/OrderShippingMethodRO'
        quantity:
          $ref: '#/components/schemas/QuantityRO'
        product:
          $ref: '#/components/schemas/LinkRO'
        thumbnail:
          $ref: '#/components/schemas/LinkRO'
        giftMessage:
          $ref: '#/components/schemas/LinkRO'
        warranty:
          $ref: '#/components/schemas/LinkRO'
        id:
          type: string
          description: the id of the line item
          example: 2hIKAB17haUAAAFG4.xU7mGD
        fulfillmentStatus:
          type: string
          description: the fulfillment status of the line item
          example: NEW
        position:
          type: integer
          description: the position of the line item
          format: int32
          example: 1
        isHiddenGift:
          type: boolean
          description: indicates if the line item is a hidden gift
          example: false
        isFreeGift:
          type: boolean
          description: indicates if the line item is a free gift
          example: false
        singleBasePrice:
          $ref: '#/components/schemas/MoneyRO'
        price:
          $ref: '#/components/schemas/MoneyRO'
        totals:
          $ref: '#/components/schemas/OrderLineItemTotalsRO'
        salesTaxes:
          type: array
          description: the line item's applied taxes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
        shippingTaxes:
          type: array
          description: the line items shipping taxes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
        itemSurcharges:
          type: array
          description: the line item's surcharges
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        itemImportSurcharges:
          type: array
          description: the line item's import surcharges
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        valueRebates:
          type: array
          description: the line item's value rebates
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        shippingRebates:
          type: array
          description: the line item's shipping rebates
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        senderName:
          type: string
          description: the name of the sender
          example: Patricia Miller
        senderEmail:
          type: string
          description: the senders email
          example: pmiller@test.intershop.de
        recipientName:
          type: string
          description: the name of the recipient
          example: Fritz Birdo
        recipientEmail:
          type: string
          description: the email of the recipient
          example: f.birdo@test.intershop.de
        greetingMessage:
          type: string
          description: the greeting message
          example: Greetings!
        variationProduct:
          type: boolean
          description: indicates if the line item is a product variation
          example: false
        bundleProduct:
          type: boolean
          description: indicates if the line item is part of a bundle
          example: false
        availability:
          type: boolean
          description: indicates if the line item is available
        giftwrap:
          $ref: '#/components/schemas/LinkRO'
      description: the line items of this OrderShippingBucket as Collection of LinkROs
      xml:
        name: OrderLineItem
    OrderLineItemTotalsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        total:
          $ref: '#/components/schemas/MoneyRO'
        valueRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        shippingTotal:
          $ref: '#/components/schemas/MoneyRO'
        shippingRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        giftingTotal:
          $ref: '#/components/schemas/MoneyRO'
        salesTaxTotal:
          $ref: '#/components/schemas/MoneyRO'
        shippingTaxTotal:
          $ref: '#/components/schemas/MoneyRO'
      description: the totals of the line item as LineItemTotals
      xml:
        name: OrderLineItemTotals
    OrderPaymentRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: OrderPayment
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        displayName:
          type: string
          description: the payment method's display name
          example: Gift Card / Certificate
        number:
          type: string
          description: the number of the payment method if applicable (e.g. CreditCardNumber)
          example: '*******6241'
        status:
          type: string
          description: the status of the payment
          example: Captured
        limitedTenderBalance:
          $ref: '#/components/schemas/MoneyRO'
        paymentTotalAmount:
          $ref: '#/components/schemas/MoneyRO'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      description: the payments of this order
      xml:
        name: OrderPayment
    OrderRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Order
          xml:
            attribute: true
        documentNo:
          type: string
          description: the document number of the order
          example: "00000051"
        creationDate:
          type: string
          description: the creation date of the order
          format: date-time
        status:
          type: string
          description: the status of the order
          example: NEW
        department:
          type: string
          description: the deparment this order belongs to
          example: Sales
        purchaseCurrency:
          type: string
          description: the currencymnemonic of the order
          example: USD
        taxationID:
          type: string
          description: the taxation ID of the order
          example: "99999999999"
        customer:
          type: string
          description: The order owner customer number.
          readOnly: true
        user:
          type: string
          description: The order owner user login.
          readOnly: true
        taxExempt:
          type: boolean
          description: indicating if the order is tax exempt
          example: false
        subscription:
          $ref: '#/components/schemas/LinkRO'
        invoiceToAddress:
          $ref: '#/components/schemas/AddressRO'
        shippingBuckets:
          type: array
          description: the shipping buckets in this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/OrderShippingBucketRO'
        payments:
          type: array
          description: the payments of this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/OrderPaymentRO'
        valueRebates:
          type: array
          description: the value rebates for this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        shippingRebates:
          type: array
          description: the shipping rebates for this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        itemSurchargeTotalsByType:
          type: array
          description: The Item Surcharge Totals by type for this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        bucketSurchargeTotalsByType:
          type: array
          description: The Bucket Surcharge Totals by type for this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        salesTaxTotalsByTaxRate:
          type: array
          description: The Sales Tax Totals by tax rate for this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
        shippingTaxTotalsByTaxRate:
          type: array
          description: The Shipping Tax Totals by tax rate for this order
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
        affiliatePartnerID:
          type: string
          description: the affiliate PartnerID
          example: 4bcKAB2Ykg4AAAFbjvEYRPJ7
        affiliateProgramID:
          type: string
          description: the affiliate ProgramID
          example: uzMKAB2YvKAAAAFb7DUYRPJ8
        externalOrderReferenceID:
          type: string
          description: the external order reference id of the order
        totals:
          $ref: '#/components/schemas/OrderTotalsRO'
        id:
          type: string
          description: the id of the order
          example: mXAKAB17RqIAAAFGOuxU7mGD
      xml:
        name: Order
    OrderShippingBucketRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: OrderShippingBucket
          xml:
            attribute: true
        shipToAddress:
          $ref: '#/components/schemas/AddressRO'
        shippingMethod:
          $ref: '#/components/schemas/OrderShippingMethodRO'
        lineItems:
          type: array
          description: the line items of this OrderShippingBucket as Collection of LinkROs
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/OrderLineItemRO'
        bucketSurcharges:
          type: array
          description: the surcharges of this OrderShippingBucket as SurchargeRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        shippingRebates:
          type: array
          description: the shipping rebates of this OrderShippingBucket as AppliedRebateRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        packSlipMessage:
          type: string
          description: the pack slip message for this OrderShippingBucket
          example: Your order is here!
        shippingInstructions:
          type: string
          description: the shipping instrucations of this OrderShippingBucket
          example: Keep away from water
      description: the shipping buckets in this order
      xml:
        name: OrderShippingBucket
    OrderShippingMethodRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of the returned element
          example: OrderShippingMethod
          xml:
            attribute: true
        id:
          type: string
          description: The id of the returned element
          example: STD_GROUND
        shippingTimeMin:
          type: integer
          description: The minimum shipping time in days
          format: int32
          example: 3
        shippingTimeMax:
          type: integer
          description: The maximum shipping time in days
          format: int32
          example: 7
      description: the shipping method for the line item as OrderShippingMethodRO
      xml:
        name: OrderShippingMethod
    OrderTotalsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: OrderTotals
          xml:
            attribute: true
        itemTotal:
          $ref: '#/components/schemas/MoneyRO'
        itemRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        shippingTotal:
          $ref: '#/components/schemas/MoneyRO'
        itemShippingRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        bucketShippingRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        orderValueRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        orderShippingRebatesTotal:
          $ref: '#/components/schemas/MoneyRO'
        taxTotal:
          $ref: '#/components/schemas/MoneyRO'
        dutiesAndSurchargesTotal:
          $ref: '#/components/schemas/MoneyRO'
        orderTotal:
          $ref: '#/components/schemas/MoneyRO'
        paymentCostsTotal:
          $ref: '#/components/schemas/MoneyRO'
        orderTotalMinusLimitedTender:
          $ref: '#/components/schemas/MoneyRO'
        limitedTenderTotal:
          $ref: '#/components/schemas/MoneyRO'
      description: the totals of this order as OrderTotalsRO
      xml:
        name: OrderTotals
    QuantityRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        value:
          type: number
        unit:
          type: string
      description: the line item quantity as QuantityRO
      xml:
        name: Quantity
    SurchargeRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Surcharge
          xml:
            attribute: true
        amount:
          $ref: '#/components/schemas/MoneyRO'
        description:
          type: string
          description: the description of the surcharge
        displayName:
          type: string
          description: the display name of the surcharge
        taxes:
          type: array
          description: the taxes applied to the surcharge amount as collection of AppliedTaxRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
      description: the item import surcharges as Collection of SurchargeRO
      xml:
        name: Surcharge
    OrderLineItemListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/OrderLineItemRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    OrderLineItemPricingRO_v1:
      type: object
      properties:
        giftingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        price:
          $ref: '#/components/schemas/PriceRO_v1'
        salesTaxTotal:
          $ref: '#/components/schemas/MoneyRO_v1'
        shippingRebatesTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingTaxTotal:
          $ref: '#/components/schemas/MoneyRO_v1'
        singleBasePrice:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedPrice:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedShippingTotal:
          $ref: '#/components/schemas/PriceRO_v1'
        undiscountedSingleBasePrice:
          $ref: '#/components/schemas/PriceRO_v1'
        valueRebatesTotal:
          $ref: '#/components/schemas/PriceRO_v1'
      description: total price values of a line item
      readOnly: true
    OrderLineItemRO_v1:
      required:
      - product
      - quantity
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeRO_v1'
        description:
          type: string
          description: The description for the product line item.
          readOnly: true
          example: "20"
        desiredDelivery:
          type: string
          description: The desired delivery date for the Item.
          format: date
          readOnly: true
        discounts:
          type: array
          description: The IDs of the discounts applied to the item pricing.
          readOnly: true
          items:
            type: string
            description: The IDs of the discounts applied to the item pricing.
            readOnly: true
        displayName:
          type: string
          description: The display name of the product line item.
          readOnly: true
          example: Acer C20 silver edition
        freeGift:
          type: boolean
          description: Flag indicating that this product line item is a free gift and  has been automatically placed in the line item container.
          readOnly: true
          example: false
        fulfillmentStatus:
          type: string
          description: The fulfillment status of this line item.
          readOnly: true
          example: NEW
        giftMessage:
          type: string
          description: Additional gift message for this the line item.
          readOnly: true
        giftWrap:
          type: string
          description: Additional gift wrapping for this the line item.
          readOnly: true
        hiddenGift:
          type: boolean
          description: Flag indicating that this product line item is a free gift, that will not be displayed in line item container.
          readOnly: true
          example: false
        id:
          type: string
          description: The line item's unique identifier.
          readOnly: true
        order:
          type: string
          description: The order this line item belongs to.
          readOnly: true
          example: yUQKAEsBeeoAAAFl9vhJwIZc
        position:
          type: integer
          description: The position of the item in the order.
          format: int32
          readOnly: true
        pricing:
          $ref: '#/components/schemas/OrderLineItemPricingRO_v1'
        product:
          type: string
          description: The product represented as stock keeping unit (SKU).
          readOnly: true
          example: "5079747"
        quantity:
          $ref: '#/components/schemas/QuantityRO_v1'
        quote:
          type: string
          description: The quote this item was created from.
          readOnly: true
          example: Qu0T3MgoyuMAx9Es2sx0Ue1
        shipToAddress:
          type: string
          description: The ship-to address URN for this line item.
          readOnly: true
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        shippingMethod:
          type: string
          description: The shipping method id for this line item.
          readOnly: true
          example: STD_5DAY
        surcharges:
          type: array
          description: Details about additional surcharges applied to the item.
          readOnly: true
          items:
            $ref: '#/components/schemas/OrderSurchargeRO_v1'
        thumbnail:
          type: string
          description: The thumbnail uri of the Product.
          readOnly: true
          example: /INTERSHOP/static/WFS/inSPIRED-inTRONICS-Site/-/inSPIRED/en_US/M/3957288-5427.jpg
        warranty:
          type: string
          description: A warranty assigned to the line item.
          readOnly: true
      description: Describes a line item that is part of an order.
    OrderLineItemCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrderLineItemRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    OrderShippingBucketListCtnrRO_v1:
      type: object
      properties:
        data:
          type: array
          description: The core data of the response object.
          items:
            $ref: '#/components/schemas/OrderShippingBucketRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    OrderShippingBucketRO_v1:
      type: object
      properties:
        deliveryTimeMax:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The maximum time the delivery will take based on the chosen shipping method (in ISO-8601 period format).
          readOnly: true
          example: P7D
        deliveryTimeMin:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: The minimum time the delivery will take based on the chosen shipping method (in ISO-8601 period format).
          readOnly: true
          example: P3D
        discounts:
          type: array
          description: The IDs of the discounts applied to the bucket totals.
          readOnly: true
          items:
            type: string
            description: The IDs of the discounts applied to the bucket totals.
            readOnly: true
        id:
          type: string
          description: The ID of the bucket.
          readOnly: true
          example: "54489489212"
        lineItems:
          type: array
          description: The ids of all line items which are associated with this bucket.
          readOnly: true
          items:
            type: string
            description: The ids of all line items which are associated with this bucket.
            readOnly: true
        order:
          type: string
          description: The order this shipping bucket belongs to.
          readOnly: true
          example: yUQKAEsBeeoAAAFl9vhJwIZc
        shipToAddress:
          type: string
          description: The ship-to address URN for this bucket.
          readOnly: true
          example: urn:address:customer:As8BcSwoiuFEEEAd3pp1Oye:Xf7AqMgoyuMAAAEs2sx0Uei
        shippingCosts:
          $ref: '#/components/schemas/PriceRO_v1'
        shippingMethod:
          type: string
          description: The shipping method id for this bucket.
          readOnly: true
          example: STD_5DAY
        surcharges:
          type: array
          description: All extra charges arising from surcharges directly specified on product or by shipping rules with action type 'bucket'.
          readOnly: true
          items:
            $ref: '#/components/schemas/OrderSurchargeRO_v1'
      description: Describes a shipping bucket.
    OrderShippingBucketCtnrRO_v1:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrderShippingBucketRO_v1'
        errors:
          type: array
          description: List of errors that occurred in relation to the request.
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        included:
          type: object
          additionalProperties:
            type: object
            description: Optionally included related data objects. Included via "include" query parameter.
            readOnly: true
          description: Optionally included related data objects. Included via "include" query parameter.
          readOnly: true
        infos:
          type: array
          description: List of informations regarding to the request (e.g. value adjustments).
          readOnly: true
          items:
            $ref: '#/components/schemas/FeedbackRO_v1'
        links:
          type: object
          additionalProperties:
            type: object
            description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
            readOnly: true
          description: Map of links to this and the optionally included related data objects. The object in the "data" property is always referenced by identifier "self". Note that this identifier may also contain a list of URIs, if the data block contains multiple elements.
          readOnly: true
    CategoryRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: Category
          xml:
            attribute: true
        attributes:
          type: array
          description: the list of attributes
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ResourceAttribute'
        hasOnlineProducts:
          type: boolean
          description: indicates if this (sub)-category has online products
        hasOnlineSubCategories:
          type: boolean
          description: indicates if this (sub)-category has online sub categories
        onlineProductsCountInSubCategories:
          type: integer
          format: int32
        products:
          type: string
          description: the products in this (sub)-category
        online:
          type: string
          description: the online of this (sub)-category
          example: "1"
        description:
          type: string
          description: the description of this (sub)-category
          example: The Vectra products and services catalog.
        richContent:
          type: string
        subCategoriesCount:
          type: integer
          description: the count of sub categories
          format: int32
          example: 1
        image:
          $ref: '#/components/schemas/LinkRO'
        images:
          type: array
          description: the images of this (sub)-category
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ImageRO'
        categoryPath:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CategoryPathRO'
        thumbnail:
          $ref: '#/components/schemas/LinkRO'
        id:
          type: string
          description: the id of this (sub)-category
          example: Cameras-Camcorders
        subCategories:
          type: array
          description: List of subcategories of this (sub)-category
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AbstractResourceObject'
        uri:
          type: string
          description: the uri of this (sub)-category
          example: PrimeTech-PrimeTechSpecials-Site/b2c-web-shop/categories/Cameras-Camcorders/1290
        productList:
          type: array
          description: List of products in this (sub)-category as List of LinkROs
          items:
            $ref: '#/components/schemas/LinkRO'
        seoAttributes:
          $ref: '#/components/schemas/SEOMetaAttributes'
        attribute:
          $ref: '#/components/schemas/ResourceAttribute'
      xml:
        name: Category
    ResourceCollectionROCategoryRO:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CategoryRO'
        type:
          type: string
          description: the type
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      description: A list of ResourceObjects
      xml:
        name: ResourceCollection
    CredentialsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        login:
          type: string
          description: the login
          example: pmiller@test.intershop.de
        password:
          type: string
          description: the password
          example: '!InterShop00!'
        securityQuestion:
          type: string
          description: the security question
          example: what was the name of your first pet?
        securityQuestionAnswer:
          type: string
          description: the security questions answer
          example: Snoopy
      description: the credentials of the new customer as CredentialsRO
      xml:
        name: Credentials
    NewCustomerRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: PrivateCustomer
          xml:
            attribute: true
        customerNo:
          type: string
        preferredInvoiceToAddress:
          $ref: '#/components/schemas/AddressRO'
        preferredShipToAddress:
          $ref: '#/components/schemas/AddressRO'
        title:
          type: string
          description: the title of the customer
          example: Mr
        firstName:
          type: string
          description: the first name of the customer
          example: Patrik
        lastName:
          type: string
          description: the last name of the customer
          example: Mueller
        birthday:
          type: string
          description: the birthday of the customer
          example: 1970-03-10
        phoneHome:
          type: string
          description: the phone home number of the customer
          example: "4211324"
        phoneBusiness:
          type: string
          description: the business phone number of the customer
          example: "4211324"
        phoneMobile:
          type: string
          description: the mobile phone number of the customer
          example: "4211324"
        fax:
          type: string
          description: the fax number of the customer
          example: "4211324"
        email:
          type: string
          description: the email address of the customer
          example: patrik@test.intershop.net
        login:
          type: string
          description: the login(username) of the customer
          example: patrik_83
        preferredLanguage:
          type: string
          description: the preferred language of the customer
          example: de_DE
        preferredPaymentInstrument:
          $ref: '#/components/schemas/PaymentRO'
        credentials:
          $ref: '#/components/schemas/CredentialsRO'
        address:
          $ref: '#/components/schemas/AddressRO'
      xml:
        name: NewCustomer
    PrivateCustomerRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: PrivateCustomer
          xml:
            attribute: true
        customerNo:
          type: string
        preferredInvoiceToAddress:
          $ref: '#/components/schemas/AddressRO'
        preferredShipToAddress:
          $ref: '#/components/schemas/AddressRO'
        title:
          type: string
          description: the title of the customer
          example: Mr
        firstName:
          type: string
          description: the first name of the customer
          example: Patrik
        lastName:
          type: string
          description: the last name of the customer
          example: Mueller
        birthday:
          type: string
          description: the birthday of the customer
          example: 1970-03-10
        phoneHome:
          type: string
          description: the phone home number of the customer
          example: "4211324"
        phoneBusiness:
          type: string
          description: the business phone number of the customer
          example: "4211324"
        phoneMobile:
          type: string
          description: the mobile phone number of the customer
          example: "4211324"
        fax:
          type: string
          description: the fax number of the customer
          example: "4211324"
        email:
          type: string
          description: the email address of the customer
          example: patrik@test.intershop.net
        login:
          type: string
          description: the login(username) of the customer
          example: patrik_83
        preferredLanguage:
          type: string
          description: the preferred language of the customer
          example: de_DE
        preferredPaymentInstrument:
          $ref: '#/components/schemas/PaymentRO'
      xml:
        name: PrivateCustomer
    RecurringOrderBuyerRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderBuyer
          xml:
            attribute: true
        title:
          type: string
          description: the title of the buyer
          example: Mr.
        firstName:
          type: string
          description: the first name of the buyer
          example: Fritz
        lastName:
          type: string
          description: the last name of the buyer
          example: Birdo
        birthday:
          type: string
          description: the birthday of the buyer
          example: Mon Jan 10 00:00:00 CET 1916
        businessPartnerNo:
          type: string
          description: the business partner number of the buyer
          example: fbirdo
        department:
          type: string
          description: the department of the buyer
        login:
          type: string
          description: the login of the buyer
          example: fbirdo@test.intershop.de
      description: details about the buyer as RecurringOrderBuyerRO
      xml:
        name: RecurringOrderBuyer
    RecurringOrderLinkRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderLink
          xml:
            attribute: true
        creationDate:
          type: string
          description: the creation date of the recurring order
          format: date-time
        startDate:
          type: string
          description: the start date of the recurring order
          format: date-time
        endDate:
          type: string
          description: the end date of the recurring oder
          format: date-time
        lastOrderDate:
          type: string
          description: the last order date of the recurring order
          format: date-time
        nextOrderDate:
          type: string
          description: the next scheduled order date of this recurring order
          format: date-time
        totalNet:
          $ref: '#/components/schemas/MoneyRO'
        totalGross:
          $ref: '#/components/schemas/MoneyRO'
        number:
          type: string
          description: the number of the recurring order
          example: "0000009"
        interval:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: the period of the recurring order
          example: P3M
        repetitions:
          type: integer
          description: the number of repititions for the recurring order
          format: int32
          example: 0
        active:
          type: boolean
          description: is the recurring order active?
          example: true
        expired:
          type: boolean
          description: is the recurring order expired?
          example: false
        itemCount:
          type: integer
          description: the number of items in the recurring order
          format: int32
          example: 1
        priceType:
          type: string
          description: the price type of the recurring order
          example: net
        buyer:
          $ref: '#/components/schemas/RecurringOrderBuyerRO'
        link:
          $ref: '#/components/schemas/LinkRO'
      description: the list of elements
      xml:
        name: RecurringOrderLink
    RecurringOrderLinkROResourceCollection:
      type: object
      properties:
        pageable:
          type: string
          description: the pageable ID
        total:
          type: integer
          description: the pageable amount total
          format: int32
        offset:
          type: integer
          description: the pageable offset
          format: int32
        amount:
          type: integer
          description: the pageable amount
          format: int32
        elements:
          type: array
          description: the list of elements
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RecurringOrderLinkRO'
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderLinkResourceCollection
          xml:
            attribute: true
        sortKeys:
          uniqueItems: true
          type: array
          description: the keys to sort for
          xml:
            wrapped: true
          items:
            type: string
            description: the keys to sort for
            xml:
              name: sortKey
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
      xml:
        name: RecurringOrderLinkResourceCollection
    RecurringOrderLineItemRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderLineItem
          xml:
            attribute: true
        sku:
          type: string
          description: the SKU of the line item
          example: "6946439"
        quantity:
          $ref: '#/components/schemas/QuantityRO'
        shipToAddress:
          $ref: '#/components/schemas/AddressRO'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodRO'
        totals:
          $ref: '#/components/schemas/RecurringOrderLineItemTotalsRO'
        salesTaxes:
          type: array
          description: the sales taxes as Collection of AppliedTaxRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
        shippingTaxes:
          type: array
          description: the shipping taxes as Collection of AppliedTaxRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedTaxRO'
        itemSurcharges:
          type: array
          description: the item surcharges as Collection of SurchargeRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        itemImportSurcharges:
          type: array
          description: the item import surcharges as Collection of SurchargeRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SurchargeRO'
        rebates:
          type: array
          description: the applied rebates as Collection of AppliedRebateRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        shippingRebates:
          type: array
          description: the shipping rebates as Collection of AppliedRebateRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AppliedRebateRO'
        product:
          $ref: '#/components/schemas/LinkRO'
        warranty:
          $ref: '#/components/schemas/LinkRO'
        giftWrap:
          $ref: '#/components/schemas/LinkRO'
        giftMessage:
          $ref: '#/components/schemas/LinkRO'
        thumbnail:
          $ref: '#/components/schemas/LinkRO'
        priceNet:
          $ref: '#/components/schemas/MoneyRO'
        singleBasePriceNet:
          $ref: '#/components/schemas/MoneyRO'
        priceGross:
          $ref: '#/components/schemas/MoneyRO'
        singleBasePriceGross:
          $ref: '#/components/schemas/MoneyRO'
        priceType:
          type: string
          description: the price type of the line item
          example: net
        id:
          type: string
          description: the id of the line item
          example: g.AKDgA.KyoAAAFXVeY5PPtu
        position:
          type: integer
          description: the position of the line item
          format: int32
          example: 1
        isHiddenGift:
          type: boolean
          description: is the line item a hidden gift?
          example: false
        isFreeGift:
          type: boolean
          description: is the line item a free gift?
          example: false
        inStock:
          type: boolean
          description: is this item in stock?
          example: true
        senderName:
          type: string
          description: the optional senders name
        senderEmail:
          type: string
          description: the optional senders email
        recipientName:
          type: string
          description: the optional recipients name
        recipientEmail:
          type: string
          description: the optional recipients email
        greetingMessage:
          type: string
          description: an optional greeting message
        availability:
          type: boolean
          description: is this item available?
          example: true
        variationProduct:
          type: boolean
          description: is this a product with variations?
          example: false
        bundleProduct:
          type: boolean
          description: is this item part of a bundle?
          example: false
      description: the line items of the bucket as Collection of RecurringOrderLineItemRO
      xml:
        name: RecurringOrderLineItem
    RecurringOrderLineItemTotalsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderLineItemTotals
          xml:
            attribute: true
        totalNet:
          $ref: '#/components/schemas/MoneyRO'
        rebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        shippingTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        shippingRebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        giftingTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        totalGross:
          $ref: '#/components/schemas/MoneyRO'
        rebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        shippingTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        shippingRebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        giftingTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        priceType:
          type: string
          description: the price type
          example: net
        salesTaxTotal:
          $ref: '#/components/schemas/MoneyRO'
        shippingTaxTotal:
          $ref: '#/components/schemas/MoneyRO'
      description: the totals of the recurring order as RecurringOrderLineItemTotalsRO
      xml:
        name: RecurringOrderLineItemTotals
    RecurringOrderRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrder
          xml:
            attribute: true
        id:
          type: string
          description: the id of the recurring order
          example: JFAKDgAj7jAAAAFiUhRgWKqi
        number:
          type: string
          description: the number of the recurring order
          example: "0000009"
        active:
          type: boolean
          description: is the recurring order active?
          example: true
        expired:
          type: boolean
          description: is the recurring order expired?
          example: false
        multipleShipmentsSupported:
          type: boolean
          description: are multiple shipments supported?
          example: true
        interval:
          type: object
          properties:
            years:
              type: integer
              format: int32
            months:
              type: integer
              format: int32
            days:
              type: integer
              format: int32
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
            chronology:
              type: object
              properties:
                calendarType:
                  type: string
                id:
                  type: string
            negative:
              type: boolean
            zero:
              type: boolean
          description: the interval of the recurring order
          example: P7D
        repetitions:
          type: integer
          description: the repetitions of the recurring order
          format: int32
          example: 42
        creationDate:
          type: string
          description: the creation date of the recurring order
          format: date-time
        startDate:
          type: string
          description: the start date of the recurring order
          format: date-time
        endDate:
          type: string
          description: the end date of the recurring order
          format: date-time
        buyer:
          $ref: '#/components/schemas/RecurringOrderBuyerRO'
        lastOrderDate:
          type: string
          description: the last order date of this recurring order
          format: date-time
        nextOrderDate:
          type: string
          description: the next scheduled order date of this recurring order
          format: date-time
        modifiedDate:
          type: string
          description: the date of the last modification of the recurring order
          format: date-time
        itemCount:
          type: integer
          description: the item count of this recurring order
          format: int32
          example: 1
        orderCount:
          type: integer
          description: the count of orders from this recurring order
          format: int32
          example: 2
        errorCode:
          type: string
          description: error code if an error occured during execution of recurring order
        invoiceToAddress:
          $ref: '#/components/schemas/AddressRO'
        commonShipToAddress:
          $ref: '#/components/schemas/AddressRO'
        commonShippingMethod:
          $ref: '#/components/schemas/ShippingMethodRO'
        payments:
          type: array
          description: the payment methods for the recurring order as Collection of PaymentROs
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/PaymentRO'
        shippingBuckets:
          type: array
          description: the shipping buckets of the recurring order as collection of RecurringOrderShippingBucketROs
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RecurringOrderShippingBucketRO'
        totals:
          $ref: '#/components/schemas/RecurringOrderTotalsRO'
      xml:
        name: RecurringOrder
    RecurringOrderShippingBucketRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderShippingBucket
          xml:
            attribute: true
        shipToAddress:
          $ref: '#/components/schemas/AddressRO'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodRO'
        packSlipMessage:
          type: string
          description: 'the pack slip message of the bucket '
          example: your order is here
        shippingInstructions:
          type: string
          description: the shipping instructions of the bucket
          example: keep away from water
        lineItems:
          type: array
          description: the line items of the bucket as Collection of RecurringOrderLineItemRO
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/RecurringOrderLineItemRO'
      description: the shipping buckets of the recurring order as collection of RecurringOrderShippingBucketROs
      xml:
        name: RecurringOrderShippingBucket
    RecurringOrderTotalsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: RecurringOrderTotals
          xml:
            attribute: true
        itemTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        itemRebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        shippingTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        itemShippingRebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        bucketShippingRebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        rebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        shippingRebatesTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        paymentCostsTotalNet:
          $ref: '#/components/schemas/MoneyRO'
        totalNet:
          $ref: '#/components/schemas/MoneyRO'
        itemTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        itemRebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        shippingTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        itemShippingRebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        bucketShippingRebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        rebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        shippingRebatesTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        paymentCostsTotalGross:
          $ref: '#/components/schemas/MoneyRO'
        totalGross:
          $ref: '#/components/schemas/MoneyRO'
        taxTotal:
          $ref: '#/components/schemas/MoneyRO'
        dutiesAndSurchargesTotal:
          $ref: '#/components/schemas/MoneyRO'
        priceType:
          type: string
          description: the price type
          example: net
      description: the recurring order's totals as RecurringOrderTotalsRO
      xml:
        name: RecurringOrderTotals
    UpdateRecurringOrderRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        active:
          type: boolean
      xml:
        name: RecurringOrder
    PaymentOptionRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: PaymentOption
          xml:
            attribute: true
        id:
          type: string
          description: the id of the payment option
          example: ISH_INVOICE
        displayName:
          type: string
          description: the display name of the payment option
          example: Invoice
        applicability:
          type: string
        restrictions:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: restriction
        paymentParameters:
          type: array
          description: the parameters for this payment option
          xml:
            name: parameters
            wrapped: true
          items:
            $ref: '#/components/schemas/GenericPropertyROObject'
      description: the payments
      xml:
        name: PaymentOption
    PaymentOptionsForMethodRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: PaymentOptionsForMethodRO
          xml:
            attribute: true
        payments:
          type: array
          description: the payments
          items:
            $ref: '#/components/schemas/PaymentOptionRO'
        method:
          type: string
          description: the http method to use when adding this method
          example: POST
      description: payment methods that can be added via http
      xml:
        name: PaymentOptionsForMethodRO
    PaymentOptionsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: PaymentOptions
          xml:
            attribute: true
        methods:
          type: array
          description: payment methods that can be added via http
          items:
            $ref: '#/components/schemas/PaymentOptionsForMethodRO'
      xml:
        name: PaymentOptions
    GiftCardAndCertificateRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of this resource
          example: GiftCardAndCertificate
          xml:
            attribute: true
        currency:
          type: string
          description: The currency of the giftcard
          example: USD
        amount:
          type: number
          description: The amount of the giftcard
          example: 10
        amountRemaining:
          type: number
          description: The remaining amount of the giftcard
          example: 5
      xml:
        name: GiftCardAndCertificate
    CustomerPasswordRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        password:
          type: string
          description: new password
          example: InterShop00
        currentPassword:
          type: string
          description: current password
          example: '!InterShop00!'
      xml:
        name: CustomerPassword
    WishListRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: The type of the returned element
          example: WishList
          xml:
            attribute: true
        preferred:
          type: boolean
          description: indicates whether this wishlist is the preferred one
        items:
          type: array
          description: the wishlist items as LinkROs
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LinkRO'
        itemsCount:
          type: integer
          description: the count of the wishlists items
          format: int32
          example: 1
        title:
          type: string
          description: The title of the Wishlist
          example: Patricias Wishlist
        creationDate:
          type: integer
          description: The creation Date of the wishlist
          format: int64
          example: 1401710462448
        public:
          type: boolean
          description: indicates whether this wishlist is public
      xml:
        name: WishList
    WishlistSharingRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          xml:
            attribute: true
        recipients:
          type: string
          description: a list of valid email-addresses to whom a wishlist sharing invitation would be sent
          example: alice@web.de,alexandra@web.de
        message:
          type: string
          description: the sharing message
          example: Hey, this is my wishlist!
        sender:
          type: string
          description: the sender of the wishlist sharing invitation
          example: John Doe
      xml:
        name: WishlistSharing
    WishlistSettingsRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: WishlistSettings
          xml:
            attribute: true
        uri:
          type: string
          description: the uri of the wishlist settings
        usePreferredWishlist:
          type: boolean
          description: indicates whether this is the preffered wishlist
      xml:
        name: WishlistSettings
    NewProductNotificationRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: NewProductNotification
          xml:
            attribute: true
        price:
          $ref: '#/components/schemas/MoneyRO'
        notificationMailAddress:
          type: string
          description: the notification e-mail address for this notification
          example: pmiller@test.intershop.de
        sku:
          type: string
          description: the sku of the product to create a notification for
          example: "10809311"
      xml:
        name: NewProductNotification
    ProductNotificationRO:
      type: object
      properties:
        name:
          type: string
          description: the name of the returned element
          xml:
            attribute: true
        type:
          type: string
          description: the type of the returned element
          example: ProductNotification
          xml:
            attribute: true
        price:
          $ref: '#/components/schemas/MoneyRO'
        notificationMailAddress:
          type: string
          description: the notification e-mail address for this notification
          example: pmiller@test.intershop.de
      xml:
        name: ProductNotification
